,Task,ExampleID,Instruction,InputFigure,InputFigureCode,GroundTruthFigure,GroundTruthFigureCode,Difficulty,predictions
359,Direct Mimic,line_45,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(12.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_45.png,ori_500/line_45.py,ori_500/line_45.png,ori_500/line_45.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plottingN = np.array([10, 20, 30, 40, 60]) # Peak Performance for Matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Note that it is necessary to use figsize=(12, 8.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Define the data for each graph. For example, standard = np.array([10**-12, 10**-12, 10**-12, 10**-12]) # Constrainted = np.array([10**-12, 10**-12, 10**-12, 10**-12]) # Innovative = np.array([10**-12, 10**-12, 10**-12, 10**-12]) # Experimental = np.array([10**-12, 10**-12, 10**-12, 10**-12]) # Innovative = np.array([10**-12, 10**-12, 10"
235,Direct Mimic,errorbar_16,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/errorbar_16.png,ori_500/errorbar_16.py,ori_500/errorbar_16.png,ori_500/errorbar_16.py,medium,"# Importing Libraries matplotlib.pyplot as plt to create a figure with specific dimensions.
import matplotlib.gridspec as gridspec; gridspec.GridSpec as gridspec; matplotlib.gridspec as gridspec; matplotlib.gridspec as gridspec; matplotlib.style; '-'; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection; gridspec.GridSpecCollection = gridspec.GridSpecCollection;"
462,Direct Mimic,scatter_3,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/scatter_3.png,ori_500/scatter_3.py,ori_500/scatter_3.png,ori_500/scatter_3.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plottingdiversity = np.array([1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4]) # Labels for the colormap for Diversity in the picturespp = np.array([30, 35, 40, 45, 50, 55, 60]) # Labels for the self-refine data for Diversity in the picturetflops = np.array([2.0e+04, 1.0e+05, 1.0e+05, 4.0e+05, 1.6e+06]) # Labels for the size of the original image# Labels for the colormap for the image to match the original image Size and Labelslabel_MAD+judge = ""MAD+judge""label_ToT = ""ToT""title = ""Token cost($)""# ===================# Part 3: Plot Configuration and Rendering# ===================fig, axs = plt.subplots(2, 1, figsize=(6, 6)) # Adjusting figure size to match the original size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.for i, ax in enumerate(axs.flat): # Creating a new matplotlib"
931,Customized Mimic,pie_12,"There is a reference image for you and I also have a set of data about traffic modes distribution for the years 2023 and 2024. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data for the charts
labels = [""Cars"", ""Buses"", ""Trains"", ""Bikes""]
traffic_data_2023 = [35.7, 24.9, 18.0, 21.4]
traffic_data_2024 = [32.5, 28.3, 22.4, 16.8]
titles = [""Traffic Distribution 2023"", ""Traffic Distribution 2024""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size.
",ori_500/pie_12.png,ori_500/pie_12.py,customized_500/pie_12.png,customized_500/pie_12.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the charts labels = [""Cars"", ""Buses"", ""Trains"", ""Bikes""] traffic_data_2023 = [35.7, 24.9, 18.0, 21.4] traffic_data_2024 = [32.5, 28.3, 22.4, 16.8] titles = [""Traffic Distribution 2023"", ""Traffic Distribution 2024""] # Model | Optimizer | Traffic Distribution 2024""] # Traffic Distribution 2024 | Model | QLoRA
# Data for the gridlines | 31.4% | 31.4% | 33.0% | 19.9%
labels = [""LoRA"", ""QLoRA""] # Data for the gridlines | 33.0% | 33.0% | 19.9% | 19.9% | 28.4% | 6.3%"
947,Customized Mimic,radar_8,"There is a reference image for you and I also have a set of data comparing three different methods across five medical assessment categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The medical assessment data is as follows:
# Categories of medical assessment
labels = np.array(
    [
        ""Cancer\nScreening"",
        ""Cardiovascular\nDiagnosis"",
        ""Infectious\nDisease Detection"",
        ""Neurological\nAssessment"",
        ""Chronic Disease\nManagement"",
    ]
)
# Statistics for each method
stats_method1 = np.array([55, 75, 60, 80, 73])
stats_method2 = np.array([68, 70, 86, 90, 55])
stats_method3 = np.array([73, 85, 75, 50, 85])
# Labels for each method
label_method1 = ""Method 1""
label_method2 = ""Method 2""
label_method3 = ""Method 3""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(5.0, 5.0) to set the image size.
",ori_500/radar_8.png,ori_500/radar_8.py,customized_500/radar_8.png,customized_500/radar_8.py,easy,<>
353,Direct Mimic,line_39,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(15.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_39.png,ori_500/line_39.py,ori_500/line_39.png,ori_500/line_39.py,medium,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting provided by the matplotlib code that reproduces the picture below. Data for plotting provided by the matplotlib code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below. Data for plotting provided by the code that reproduces the picture below.
587,Customized Mimic,bar_3,"There is a reference image for you and I also have a set of data about customer satisfaction ratings for different household appliances. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data for each subplot
datasets = [""Refrigerator"", ""Washing Machine"", ""Microwave"", ""Vacuum Cleaner""]
models = [""Basic Model"", ""Advanced Model"", ""ML Model"", ""Comprehensive Analysis""]
PLCC_data = {
""Refrigerator"": [0.854, 0.868, 0.866, 0.872],
""Washing Machine"": [0.890, 0.895, 0.900, 0.915],
""Microwave"": [0.815, 0.825, 0.830, 0.840],
""Vacuum Cleaner"": [0.880, 0.886, 0.890, 0.892],
}
SROCC_data = {
""Refrigerator"": [0.856, 0.870, 0.868, 0.870],
""Washing Machine"": [0.895, 0.900, 0.905, 0.919],
""Microwave"": [0.800, 0.810, 0.815, 0.825],
""Vacuum Cleaner"": [0.886, 0.890, 0.894, 0.894],
}
label = [""PLCC"", ""SROCC""]
ylabel = ""Satisfaction Ratings""
title = ""Customer Satisfaction Analysis by Models""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 3.0) to set the image size.
",ori_500/bar_3.png,ori_500/bar_3.py,customized_500/bar_3.png,customized_500/bar_3.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for each subplot datasets = [""Refrigerator"", ""Washing Machine"", ""Microwave""] # ""Microwave"" data for each subplot datasets = [""Basic Model"", ""Advanced Model"", ""ML Model""] # Comprehensive Analysis] PLCC_data = {""Refrigerator"": [0.854, 0.868, 0.872], ""Washing Machine"": [0.855, 0.880, 0.895], ""Microwave"": [0.885, 0.890, 0.868], ""Full model"": [0.940, 0.945, 0.950]] # Microwave"" data for each subplot datasets = [""Refrigerator"": [0.880, 0.885, 0.890], ""Microwave"": [0.886, 0.880, 0.895], ""Full model"": [0.940, 0.945, 0.950]] # Microwave"" data for each subplot datasets = [""Microwave""] # Basic Model"", ""Washing Machine""] # Advanced Model data for each subplot datasets = [""Basic Model"", ""Advanced Model"", ""ML Model""] # Comprehensive Analysis] PLCC_data = {""Refrigerator"": [0.85"
394,Direct Mimic,line_80,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(9.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_80.png,ori_500/line_80.py,ori_500/line_80.png,ori_500/line_80.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting provided by the author and run_1 and run_2 codes for the picture provided# Data for plotting provided by the author and run_3 and run_4 codes for the picture provided# Data for plotting provided by the author and run_5 and run_6 codes for the picture provided# Data for plotting provided by the author and run_7 and run_8 codes for the picture provided# Data for plotting provided by the author and run_1 and run_2 codes for the picture provided# Data for plotting provided by the author and run_4 codes for the picture provided# Data for plotting provided by the author and run_2 codes for the picture provided# Data for plotting provided by the author and run_3 and run_4 codes for the picture provided# Data for plotting provided by the author and run_4 codes for the picture provided# Data for plotting provided by the author and run_2 codes for the picture provided# Data for plotting provided by the author and run_3 and run_4 codes for the picture provided# Data for plotting provided by the author and run_4 codes for the picture provided# Data for plotting provided by the author and run_5 and run_2 codes for the picture provided# Data for plotting provided by the author and run_2 codes for the picture provided# Data for plotting provided by the author and run_4 codes for the picture provided# Data for plotting provided by the author and run_2 codes for the picture provided# Data for plotting provided
453,Direct Mimic,radar_14,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/radar_14.png,ori_500/radar_14.py,ori_500/radar_14.png,ori_500/radar_14.py,easy,<<img_src=ext_1> <img_src=ext_2> <img_src=ext_3> <img_src=ext_4>>
350,Direct Mimic,line_36,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(15.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_36.png,ori_500/line_36.py,ori_500/line_36.png,ori_500/line_36.py,easy,"# Importing Libraries for Matplotlib Code
import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np; np.random.seed(0) # Generate random data for the plot
from matplotlib.lines import Line2D
# Define the ratio of the random values to the corresponding picture
ratios = np.linspace(0.1, 1.0, 10) # Random values for the given ratio
performance = np.random.uniform(0.5, 0.6, 10) # Performance values for the given ratio
# Define the grid for the plot
grid = np.linspace(0.1, 1.0, 10) # Random values for the grid
performance_grid = np.linspace(0.5, 1.0, 10) # Performance values for the grid
# Define the grid for the contour plot
def grid_perf(x, y, grid):
    return np.sqrt((x**2 + y**2) ** 2 + (x**3 + y**3) ** 2) / grid.T # Labels for the contour plot
def grid_perf(x, y, grid):
    return np.sqrt((x**2 + y**2) ** 2 + (x**3 + y**3) ** 2) / grid.T # Labels for the grid plot
def grid_perf(x, y, grid):
    return np.sqrt((x**2 + y**2) ** 2 + (x**3 + y**3) ** 2) / grid.T # Labels for the grid plot"
852,Customized Mimic,line_38,"There is a reference image for you and I also have a set of data about fuel efficiency across different models and test runs. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
test_runs = [""3"", ""10"", ""30"", ""100""] # Treat test_runs as strings to make them categorical
baseline_efficiency = [30, 30, 30, 30]
model_3 = [28, 27, 26, 29]
model_5 = [27, 29, 24, 25]
model_7 = [26, 27, 25, 27]
model_10 = [23, 24, 23, 22]
model_30 = [20, 23, 28, 21]

# Axes Limits and Labels
xlabel_value = ""# Test Runs""
ylabel_value = ""Fuel Efficiency (MPG)""

# Labels
label_Baseline = ""Baseline""
label_3 = ""Model 3""
label_5 = ""Model 5""
label_7 = ""Model 7""
label_10 = ""Model 10""
label_30 = ""Model 30""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(7.0, 3.0) to set the image size.
",ori_500/line_38.png,ori_500/line_38.py,customized_500/line_38.png,customized_500/line_38.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Data test_runs = [""3"", ""10"", ""30"", ""100""] # Treat test_runs as strings to make them categorical baseline_efficiency = [30, 30, 30, 30] # Test runs as strings to make them categorical baseline_efficiency = [30, 30, 30, 30] # Model 5 = [28, 27, 29, 24, 25] # Model 7 = [26, 27, 25, 27] # Model 10 = [23, 24, 23, 28] # Axes Limits and Labels labels_xlabel_value = ""# Test Runs"" # Axis limits and labels xlabel_value = ""# Baseline"" # Baseline label_3 = ""# Model 3"" # Model 5 = ""# Model 7"" # Model 10 = ""# Model 10"" label_30 = ""# Model 30"" # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Treat test_runs as strings to make them categorical baseline_efficiency = [30, 30, "
438,Direct Mimic,quiver_4,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/quiver_4.png,ori_500/quiver_4.py,ori_500/quiver_4.png,ori_500/quiver_4.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the vector field (-F + ρVFF) based on the picture providedx = np.linspace(-1, 1, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100)y = np.sin(x) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, 100) + np.random.normal(0, 0.05, "
30,Direct Mimic,CB_16,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(7.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/CB_16.png,ori_500/CB_16.py,ori_500/CB_16.png,ori_500/CB_16.py,hard,"# Importing Libraries matplotlib.pyplot as plt to create a figure with specific dimensions.
import matplotlib.patches as mpatches
import numpy as np; np.random.seed(0) # Generate random data for illustration purposes.
from matplotlib.colors import LogNorm
from matplotlib.patches import Rectangle
from matplotlib.patches import Rectangle
from matplotlib.patches import Rectangle
from matplotlib.patches import Rectangle
from matplotlib.patches import Rectangle
# Create a figure with two subplots.
fig, ax = plt.subplots(figsize=(8, 6))
# Create a violin plot with two rows and one diagonal.
ax.violinplot(data, showmeans=False, showextrema=False, showextrema=True, showextrema=False)
ax.set_xlabel(xlabel)
ax.set_ylabel(ylabel)"
535,Customized Mimic,CB_21,"There is a reference image for you and I also have a set of data about traffic speed at different times of the day. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data for the line plot
traffic_speed_am = np.random.normal(30, 5, 100)
traffic_speed_pm = np.random.normal(25, 7, 100)
traffic_speed_night = np.random.normal(35, 6, 100)

kde_am = gaussian_kde(traffic_speed_am)
kde_pm = gaussian_kde(traffic_speed_pm)
kde_night = gaussian_kde(traffic_speed_night)

x_range = np.linspace(0, 60, 50)
labels = [""Morning"", ""Evening"", ""Night""]
title = ""Time of Day""
xlabel = ""Speed (mph)""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 4.0) to set the image size.
",ori_500/CB_21.png,ori_500/CB_21.py,customized_500/CB_21.png,customized_500/CB_21.py,hard,<>
813,Customized Mimic,hist_19,"There is a reference image for you and I also have a set of data about anomaly detection rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data with more random distribution
data1 = np.random.normal(0.7, 0.1, 10000)
data2 = np.random.normal(0.85, 0.12, 10000)
data3= np.random.normal(0.75, 0.15, 10000) # Additional data with more variance
data4 = np.random.normal(0.9, 0.13, 10000) # Additional data with more variance

suptitle = ""Anomaly Detection Rate Distribution""
binslist = [100, 100]
titles = [""(a) System A - Detection Rate"", ""(b) System B - Detection Rate""]
labels = [""Normal"", ""Anomalous""]
ranges=[0, 1.5]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 7.0) to set the image size.
",ori_500/hist_19.png,ori_500/hist_19.py,customized_500/hist_19.png,customized_500/hist_19.py,medium,"# Defect Detection Distribution
defective_data = np.random.normal(0.7, 0.1, 10000)
defective_label = ""Normal""
defective_variance = np.random.normal(0.75, 0.15, 10000)
# Additional data with more variance data4 = np.random.normal(0.75, 0.13, 10000) # Additional data with more variance data4 = np.random.normal(0.9, 0.13, 10000) # Additional data with more variance data5 = np.random.normal(0.9, 0.13, 10000) # Additional data with more variance data6 = np.random.normal(0.75, 0.13, 10000) # Additional data with more variance data7 = np.random.normal(0.75, 0.13, 10000) # Additional data with more variance data8 = np.random.normal(0.75, 0.13, 10000) # Additional data with more variance data9 = np.random.normal(0.75, 0.13, 10000) # Additional data with more variance data10 = np.random.normal(0.75, 0.13, 10000) # Additional data with more variance data11 = np.random.normal(0.75, 0.13, 10000) # Additional data with more variance data12"
719,Customized Mimic,density_5,"There is a reference image for you and I also have a set of data about transportation speeds. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data for transportation domain
car_speeds = np.random.normal(loc=100, scale=15, size=1000) # Car speeds on highways (km/h)
train_speeds = np.random.normal(loc=150, scale=20, size=1000) # Train speeds on railways (km/h)

# Compute density for each dataset
density_car = gaussian_kde(car_speeds)
density_train = gaussian_kde(train_speeds)
xs = np.linspace(50, 200, 300)
ys_car = density_car(xs)
ys_train = density_train(xs)
labels = [""Car Speeds"", ""Train Speeds""]
xlabel = ""Density""
ylabel = ""Speed (km/h)""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(9.0, 6.0) to set the image size.
",ori_500/density_5.png,ori_500/density_5.py,customized_500/density_5.png,customized_500/density_5.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Sample data for transportation domain car speeds = np.random.normal(loc=100, scale=15, size=1000) # Car speeds on highways (km/h) # Train speeds on railways (km/h) # Compute density for each dataset density_car = gaussian_kde(car_speeds) density_train = gaussian_kde(train_speeds) xsi = np.linspace(50, 200, 300) # ys_car = density_car(xs) ys_train = density_train(xs) labels = [""Car Speeds"", ""Train Speeds""] # xlabel = ""Density"" # ylabel = ""Speed (km/h)"" # Note that it is necessary to use figsize=(9.0, 6.0) to set the image size.# ===================# Part 3: Plot Configuration and Rendering# ===================# Create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here, You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(9.0, 6.0) to set the image size.plt.figure(figsize=(9.0, 6.0)) # Adjusting figure size to match the original image dimensions and"
771,Customized Mimic,heatmap_7,"There is a reference image for you and I also have a set of data about correlation coefficients in the energy sector. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data for correlation coefficients in the energy sector
data = np.array(
[
[1.00, 0.78, 0.66, 0.55, 0.62, 0.70, 0.48, 0.57, 0.61],
[0.78, 1.00, 0.72, 0.65, 0.59, 0.63, 0.55, 0.60, 0.68],
[0.66, 0.72, 1.00, 0.73, 0.57, 0.61, 0.64, 0.58, 0.65],
[0.55, 0.65, 0.73, 1.00, 0.66, 0.69, 0.71, 0.59, 0.62],
[0.62, 0.59, 0.57, 0.66, 1.00, 0.79, 0.68, 0.72, 0.64],
[0.70, 0.63, 0.61, 0.69, 0.79, 1.00, 0.76, 0.73, 0.71],
[0.48, 0.55, 0.64, 0.71, 0.68, 0.76, 1.00, 0.74, 0.67],
[0.57, 0.60, 0.58, 0.59, 0.72, 0.73, 0.74, 1.00, 0.70],
[0.61, 0.68, 0.65, 0.62, 0.64, 0.71, 0.67, 0.70, 1.00],
]
)

labels = [""solar"", ""wind"", ""hydro"", ""nuclear"", ""coal"", ""gas"", ""biomass"", ""geothermal"", ""oil""]
title = ""Correlation Coefficients of Energy Production Types""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/heatmap_7.png,ori_500/heatmap_7.py,customized_500/heatmap_7.png,customized_500/heatmap_7.py,medium,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for correlation coefficients for energy production types and energy sector data. Correlation coefficients are the data that exactly mirrors the style of the reference image and accurately represents my data.correlation_coefficients = np.array([[1, 0.90, 0.89, 0.64, 0.65, 0.72], [0.65, 0.71, 0.86, 0.75, 0.74, 0.73]]) # Sample data for correlation coefficients in the energy sector data. Here you must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Continuing to use figsize=(10, 8.0) to set the image size.correlation_coefficients_label = ""Correlation Coefficients of Energy Production Types"" """"""
correlation_coefficients_label = ""Correlation Coefficients of Energy Production Types"" """"""
# Create a heatmap with the correlation coefficients and set the colormap to blue to match the original image's colormap."
111,Direct Mimic,bar_27,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 3.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_27.png,ori_500/bar_27.py,ori_500/bar_27.png,ori_500/bar_27.py,easy,<<<img_src=Success> <img_src=OccupancyError> <img_src=TrajectoryOptimizationError>> <<img_src=GroundingError> <img_src=Grippercollision> <img_src=Graspingfailed>> <img_src=PercentageOfTotalTrials> <<RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX> <img_src=RoboCodeX>>
797,Customized Mimic,hist_3,"There is a reference image for you and I also have a set of data about animal weights. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Simulating data
camel_weights = np.random.exponential(scale=0.03, size=1000)
kangaroo_weights = np.random.exponential(scale=0.03, size=1000)

# Define the number of bins and bin edges for consistent bin width
bins = np.histogram(np.hstack((camel_weights, kangaroo_weights)), bins=25)[1]
labels = [""Elephant"", ""Giraffe""]
xlabel = ""Animal Weight""
ylabel = ""Count""
title = ""Animal Weights Distribution""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(5.0, 4.0) to set the image size.
",ori_500/hist_3.png,ori_500/hist_3.py,customized_500/hist_3.png,customized_500/hist_3.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as pltfrom matplotlib.colors import LinearSegmentedColormap# ===================# Part 2: Data Preparation# ===================# Sample data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here, you must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(5, 4.0) to set the image size. Continuing to use the image size will result in incorrect data. Here, I will use the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(5, 4.0) to set the image size. Continuing to use figsize=(5, 4.0) to set the image size. Continuing to use figsize=(5, 4.0) to set the image size. Continuing to use figsize=(5, 4.0) to set the image size. Continuing to use figsize=(5, 4.0) to set the image size. Continuing to use figsize=(5, 4.0) to set the image size. Continuing to use figsize=(5, 4.0) to set the image size. Continuing to use figsize=(5, 4.0) to set the image"
825,Customized Mimic,line_11,"There is a reference image for you and I also have a set of data about fuel efficiency across different vehicle types at varying engine loads. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Sample data points
engine_load = [0, 20, 40, 60, 80]
sedan_mpg = [30, 28, 26, 24, 22]
suv_mpg = [25, 23, 21, 19, 17]
truck_mpg = [20, 18, 16, 14, None]
minivan_mpg = [22, 20, 18, 16, None]
baseline_mpg = [30, 30]
baseline_load = [-10, 90]

# Axes Limits and Labels
xlabel_value = ""Engine Load (%)""

ylabel_value = ""Fuel Efficiency (MPG)""

# Labels
label_1 = ""Sedan""
label_2 = ""SUV""
label_3 = ""Truck""
label_4 = ""Minivan""
label_5 = ""Baseline""

# Titles
title_1 = ""Effect of Engine Load on Fuel Efficiency""
title_2 = ""Vehicle Types""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.
",ori_500/line_11.png,ori_500/line_11.py,customized_500/line_11.png,customized_500/line_11.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. Data for the legend and the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the text labels. Data for the legend and the legend and the text labels. Data for the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and the legend and legend and legend and legend and legend and legend and legend and legend and legend
479,Direct Mimic,scatter_20,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/scatter_20.png,ori_500/scatter_20.py,ori_500/scatter_20.png,ori_500/scatter_20.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the scatter plot with colorbar colors and matplotlib code to match the original size. Now, please give me the matplotlib code that reproduces the picture below.sizes = np.linspace(10, 90, 100) # Generate sizes from 100 to 90 in a given picturecolors = np.random.rand(100) * 100 # Use colormap to create a matplotlib colorbar based on the picture based on the picture I provide. Here that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Create a scatter plot with colorbar colors. Here, I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.plt.figure(figsize=(10, 7)) # Adjust the size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.plt.scatter(sizes, colors, s=sizes, c=colors, cmap=""viridis"") # Add a colorbar to the scatter"
199,Direct Mimic,box_15,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/box_15.png,ori_500/box_15.py,ori_500/box_15.png,ori_500/box_15.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the boxplots (replace with actual data) and the actual picture. Data for the threshold is given in the picture. Data for the boxplots (replace with actual data) and the actual picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture. Data for the threshold is given in the picture.
68,Direct Mimic,HR_24,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/HR_24.png,ori_500/HR_24.py,ori_500/HR_24.png,ori_500/HR_24.py,hard,"# Python code to make the triangulation flat shading
triang_flat = np.linspace(-1, 1, 100)
triang_flat_shading = np.linspace(-1, 1, 100)
# Matplotlib colormap to indicate the triangulation angle
cmap = plt.get_cmap(""plasma"")
# Plot the triangulation angle
plt.figure(figsize=(8, 8))
plt.triplot(triang_flat, triang_flat, cmap=cmap, alpha=0.7, linewidth=1)
plt.colorbar()
plt.title(""tripcolor of Delaunay triangulation, flat shading"")"
185,Direct Mimic,box_1,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/box_1.png,ori_500/box_1.py,ori_500/box_1.png,ori_500/box_1.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the boxplots with different SAM rating and color codes for the picture provideddata = np.random.rand(10, 10) * 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + "
84,Direct Mimic,area_5,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/area_5.png,ori_500/area_5.py,ori_500/area_5.png,ori_500/area_5.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart representing the world population based on a given picture. Data for the year 1950 to 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year 2011. Data for the year
285,Direct Mimic,heatmap_21,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/heatmap_21.png,ori_500/heatmap_21.py,ori_500/heatmap_21.png,ori_500/heatmap_21.py,hard,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting — Votee — Seer — Hunter — Villager — Abstain — Werewolf — Seer — Witch — Hunter — Witch — Seer — Werewolf — Seer — Werewolf — Seer — Witch — Witch — Seer — Werewolf — Seer — Werewolf — Seer — Witch — Hunter — Hunter — Villager — Abstain — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf — Werewolf
560,Customized Mimic,HR_16,"There is a reference image for you and I also have a set of data about employee performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data and labels
num_metrics = 5

theta = np.linspace(0, 2 * np.pi, num_metrics, endpoint=False) 
radii = np.random.rand(num_metrics) * 10 
width = np.random.rand(num_metrics) * 1.5 + 0.5 

# Labels for the bars (e.g., different performance metrics)
categories = [
""Sprint Speed"",
""Endurance"",
""Jump Height"",
""Agility"",
""Strength"",
]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/HR_16.png,ori_500/HR_16.py,customized_500/HR_16.png,customized_500/HR_16.py,hard,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data and labels for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize=(8.0, 8.0) to set the image size. Continuing to use figsize"
975,Customized Mimic,scatter_16,"There is a reference image for you and I also have a set of data about the performance of different machine learning models in terms of efficiency and AUROC macro scores. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data for plotting
efficiency = [
0.1,
0.35,
0.55,
0.7,
0.9,
0.25,
0.45,
0.6,
] # Added missing efficiency values
auroc_macro = [
0.84,
0.82,
0.80,
0.78,
0.76,
0.79,
0.77,
0.75,
] # Added missing auroc_macro values
model_names = [
""BioBERT"",
""BioDistilBERT"",
""BioMobileBERT"",
""TinyBioBERT"",
""Llama-2-7b"",
""PEFT method"",
""Full"",
""LORA"",
]
xlabel = ""Efficiency""
ylabel = ""AUROC macro""
legend_title = ""Model name""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 4.0) to set the image size.
",ori_500/scatter_16.png,ori_500/scatter_16.py,customized_500/scatter_16.png,customized_500/scatter_16.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting efficiency = [0.1, 0.35, 0.55, 0.7, 0.9, 0.25, 0.45, 0.6, ] # Added missing efficiency values auroc_macro = [0.84, 0.82, 0.80, 0.78, 0.79, 0.77, 0.75, ] # Added missing auroc_macro values model_names = [""BioBERT"", ""BioDistillBERT"", ""BioMobileBERT"", ""TinyBioBERT"", ""Llama-2-7b"", ""PEFT method"", ""Full"", ""LORA"", ] # Xlabel = ""Carbon Reduction (%)""ylabel = ""Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Data for plotting efficiency = [0.1, 0.35, 0.55, 0.7, 0.9, 0.25, 0.45, 0.6, ] # Added missing efficiency values auroc_macro = [0.84, 0.82, 0.80, 0.78, 0.76, 0.79, 0.77, 0.75, ] # Added missing a"
712,Customized Mimic,contour_3,"There is a reference image for you and I also have a set of data about electricity consumption in relation to temperature for two different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data to create contour lines similar to the picture
temperature = np.linspace(-10, 40, 100) # Temperature in Celsius
consumption = np.linspace(100, 1000, 100) # Electricity consumption in MWh
Temperature, Consumption = np.meshgrid(temperature, consumption)
RegionA = np.exp(-((Temperature - 15) ** 2 + (Consumption - 550) ** 2) / 5000)
RegionB = np.exp(-((Temperature - 25) ** 2 + (Consumption - 750) ** 2) / 5000)
labels = [""Region A"", ""Region B""]
xlabel = ""Temperature (°C)""
ylabel = ""Electricity Consumption (MWh)""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/contour_3.png,ori_500/contour_3.py,customized_500/contour_3.png,customized_500/contour_3.py,hard,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the radar chart with reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Data for numpy as np.np.random.seed(0)male = np.linspace(100, 1000, 100) # Temperature in Celsius consumption => np.linspace(100, 1000, 100) # Electricity consumption in MWh Temperature, Consumption = np.meshgrid(temperature, consumption) # RegionA = np.exp(-(Temperature - 15) ** 2 + (Consumption - 550) ** 2) / 5000) RegionB = np.exp(-(Temperature - 25) ** 2 + (Consumption - 750) ** 2) / 5000) labels = [""Region A"", ""Region B""] * 2 + (Temperature - 750) ** 2 / 5000) labels = [""Region A"", ""Region B""] * 2 + (Temperature - 750) ** 2 / 5000) # Region A labels are accurately represented in your code.# Compute the data to create contour lines similar to the picture temperature in the picture temperature categorytemperature = np.linspace(100, 1000"
743,Customized Mimic,errorbar_24,"There is a reference image for you and I also have a set of data about transportation metrics by region. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation metrics data is as follows:
# Regions
regions = [""North America"", ""Europe"", ""Asia"", ""South America"", ""Africa"", ""Australia"", ""Central America"", ""Middle East"", ""Southeast Asia"", ""Scandinavia"",]
# Car Ownership Rates
car_ownership_rates = [409.76, 443.03, 420.55, 408.97, 384.73, 429.17, 387.51, 478.35, 492.73, 376.68]
# Public Transport Usage Rates
public_transport_usage_rates = [45.83, 40.57, 41.36, 48.51, 31.42, 31.74, 30.40, 46.65, 45.56, 47.40]
# Errors for Car Ownership Rates
car_ownership_errors = [59.14, 51.96, 38.45, 51.22, 24.73, 45.59, 25.73, 57.78, 40.87, 36.58]
# Errors for Public Transport Usage Rates
public_transport_errors = [6.58, 9.64, 7.73, 8.41, 5.11, 8.70, 8.67, 8.70, 10.66, 9.09]
# Label of y axis
ylabel_value = ""Rates""
# Title
title = ""Transportation Metrics by Region""
# Labels
label_Car_Ownership = ""Car Ownership Rates""
label_Public_Transport_Usage = ""Public Transport Usage Rates""
Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/errorbar_24.png,ori_500/errorbar_24.py,customized_500/errorbar_24.png,customized_500/errorbar_24.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation metrics data is as follows: # Regions regions = [""North America"", ""Europe"", ""Asia"", ""South America"", ""Africa"", ""Australia"", ""Central America"", ""Middle East""] # Labels label_Car_Ownership = ""Car Ownership Rates"" label_Public_Transport_Usage_Rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public_transport_usage_rates public"
899,Customized Mimic,multidiff_5,"There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Revenue sources
revenue_sources = [""Product Sales"", ""Service Fees"", ""Investments"", ""Other Income""]
# Revenue counts
revenue_counts = [400, 300, 150, 150]
# Title 1
title_1 = ""Revenue Sources Breakdown""
# Quarters
quarters = [""Q1"", ""Q2"", ""Q3"", ""Q4""]
# Years
years = [2020, 2017, 2016, 2022]
# Revenue
revenue = [200, 300, 350, 400]
# Title 2
title_2 = ""Quarterly Revenue and Profit""
# Label for x-axis
xlabel_value = ""Year""
# Label for y-axis
ylabel_value = ""Amount (in $ thousands)""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size.
",ori_500/multidiff_5.png,ori_500/multidiff_5.py,customized_500/multidiff_5.png,customized_500/multidiff_5.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the Chart that accurately mirrors the style of the reference image and accurately represents my data. The data is as follows: # Revenue sources revenue_sources = [""Product Sales"", ""Service Fees"", ""Investments"", ""Other Income""] # Revenue counts revenue_counts = [400, 300, 150, 150] # Title 1 title_1 = ""Revenue Sources Breakdown"" # Quarters quarters = [""Q1"", ""Q2"", ""Q3"", ""Q4""] # Years years = [2020, 2017, 2016, 2022] # Revenue revenue = [200, 300, 350, 400] # Title 2 title_2 = ""Quarterly Revenue and Profit"" # Label for x-axis xlabel_value = ""Year"" # Label for y-axis ylabel_value = ""Number of Documents"" # Number of documents in the style of the reference image and accurately represents my data. # Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 5.0) to set the image size.# Data for Chart that accurately mirrors the style of the reference image and accurately represents my data. Here are some charts that accurately mirrors the style of the reference image and accurately represents my data."
674,Customized Mimic,bar_90,"There is a reference image for you and I also have a set of data about the cost of living comparison in major US cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


models = [""New York"", ""Los Angeles"", ""Chicago"", ""Houston"", ""Phoenix"", ""Philadelphia"", ""San Antonio""]
percentages = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]
percentages2 = [2.0, 3.55, 5.64, 12.64, 18.79, 20.93, 30.5]

# Sorting the data in descending order while keeping track of the cities order
sorted_data = sorted(zip(percentages, models), reverse=True)
sorted_percentages, sorted_models = zip(*sorted_data)

xlabel = ""City""
ylabel1 = ""Housing Price Increase (%)""
ylabel2 = ""Living Cost Increase (%)""
title = ""Cost of Living Comparison in Major US Cities""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(12.0, 8.0) to set the image size.
",ori_500/bar_90.png,ori_500/bar_90.py,customized_500/bar_90.png,customized_500/bar_90.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the charts that exactly mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the charts that accurately mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the charts that accurately mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately
925,Customized Mimic,pie_6,"There is a reference image for you and I also have a set of data about different aspects of a business. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The business aspects data is as follows:
# Aspects of business
labels = [""Product Quality"", ""Customer Service"", ""Pricing"", ""User Experience"", ""Brand Reputation""]
# Percentage of each aspect
sizes = [35.4, 10.3, 24.7, 17.2, 12.4]
# Colors for each aspect
colors = [""#1a78b1"", ""#379f39"", ""#aec8e6"", ""#fe7e28"", ""#ffba7e""]

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/pie_6.png,ori_500/pie_6.py,customized_500/pie_6.png,customized_500/pie_6.py,easy,<<img_src=psychological img_alt=Psychological> <img_src=others img_alt=Others> <img_src=market img_alt=Market> <img_src=satisfaction img_alt=Satisfactory> <img_src=social img_alt=Social>>
576,Customized Mimic,PIP_7,"There is a reference image for you and I also have a set of data about performance metrics over iterations for two different groups: Experimental and Control. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data to approximate the curves in the picture
x = np.linspace(0, 200, 200)
y1 = np.linspace(0.7, 1.2, 200) * (1 + np.random.normal(0, 0.05, 200))
y2 = np.linspace(0.8, 1.0, 200) * (1 + np.random.normal(0, 0.05, 200))

labels = [""Experimental"", ""Control""]
xlabel = ""Iterations""
ylabel = ""Performance Metric""
insetaxes = [0.2, 0.6, 0.25, 0.25]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size.
",ori_500/PIP_7.png,ori_500/PIP_7.py,customized_500/PIP_7.png,customized_500/PIP_7.py,hard,"# Plot the difference in confidence intervals for two different groups: experimental and control
plt.figure(figsize=(8, 6))
plt.plot(WI, label=""WI"")
plt.plot(ISQ, label=""ISQ"")
plt.xlabel(""Time Steps"")
plt.ylabel(""Discounted cumulative reward"")
plt.legend()"
790,Customized Mimic,heatmap_26,"There is a reference image for you and I also have a set of data about exponential distribution samples. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
methods = [
None,
""none"",
""nearest"",
""bilinear"",
""bicubic"",
""spline16"",
""spline36"",
""hanning"",
""hamming"",
""hermite"",
""kaiser"",
""quadric"",
""catrom"",
""gaussian"",
""bessel"",
""mitchell"",
""sinc"",
""lanczos"",
]

grid = np.random.exponential(1 / 20, (4, 4))


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(9.0, 6.0) to set the image size.
",ori_500/heatmap_26.png,ori_500/heatmap_26.py,customized_500/heatmap_26.png,customized_500/heatmap_26.py,hard,<<img_src=none img_alt=None> <img_src=none img_alt=none> <img_src=nearest img_alt=nearest> <img_src=bilinear img_alt=bilinear> <img_src=bicubic img_alt=bicubic> <img_src=spline16 img_alt=spline16>>
210,Direct Mimic,contour_1,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/contour_1.png,ori_500/contour_1.py,ori_500/contour_1.png,ori_500/contour_1.py,hard,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Generate ground truth data for the picture based on the ground truth data for the picture based on the picture I provide. Here the ground truth data is generated from the ground truth data. Ground truth data is generated from ground truth data. Generated ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth data is generated from generated ground truth data. Ground truth
614,Customized Mimic,bar_30,"There is a reference image for you and I also have a set of data about machine learning model performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Updated data
methods = [""K-Means"", ""Random Forest"", ""Neural Network""]
efficiency = [78.4, 88.9, 92.3]
accuracy = [82.1, 91.5, 94.8]
precision = [75.0, 89.7, 93.2]

# X-axis positions
x = np.arange(len(methods))

labels = [""Efficiency"", ""Accuracy"", ""Precision""]
ylabel = ""Performance Metrics (%)""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size.
",ori_500/bar_30.png,ori_500/bar_30.py,customized_500/bar_30.png,customized_500/bar_30.py,easy,# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as pltimport matplotlib.gridspec as gridspec;np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.  # Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy of the reference image and accurately represents my data. Data for the accuracy
463,Direct Mimic,scatter_4,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(5.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/scatter_4.png,ori_500/scatter_4.py,ori_500/scatter_4.png,ori_500/scatter_4.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Generate random data for the scatter plot with matplotlib.colors as colors for each picturedata = np.random.rand(100) * 5.0 + 100 # Generate random data for the scatter plot with matplotlib.colors as colors for each picturecolors = np.random.rand(100) * 5.0 + 5.0 # Generate random colors for the scatter plot with matplotlib.colors as colors for each picture# Generate random data for the scatter plot with matplotlib.colors as colors for each picturedata_x = np.random.rand(100) * 5.0 + 5.0 # Generate random data for the scatter plot with matplotlib.colors as colors for each picturedata_y = np.random.rand(100) * 5.0 + 5.0 # Generate random data for the scatter plot with matplotlib.colors as colors for each picturecolors_x = np.random.rand(100) * 5.0 + 5.0 # Generate random data for the scatter plot with matplotlib.colors as colors for each picturecolors_y = np.random.rand(100) * 5.0 + 5.0 # Generate random data for the scatter plot with matplotlib.colors as colors for each picture# Generate random data for the scatter plot with matplotlib.colors as colors for each picturedata_y = np
704,Customized Mimic,box_20,"There is a reference image for you and I also have a set of data about test scores across different subjects and semesters. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Placeholder data for the boxplots
data1 = [np.random.normal(100, 15, 100), np.random.normal(90, 15, 100)]
data2 = [np.random.normal(75, 10, 100), np.random.normal(70, 10, 100)]
data3 = [np.random.normal(60, 8, 100), np.random.normal(65, 5, 100)]
data4 = [np.random.normal(55, 7, 100), np.random.normal(50, 7, 100)]
data5 = [np.random.normal(80, 12, 100), np.random.normal(75, 12, 100)]
titles = [""Math Test Scores"", ""Reading Test Scores"", ""Science Test Scores"", ""Art Test Scores"", ""Music Test Scores""]
xlabel = ""Semester""
ylabels = ""Score"", ""Score"", ""Score"", ""Score"", ""Score""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size.
",ori_500/box_20.png,ori_500/box_20.py,customized_500/box_20.png,customized_500/box_20.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the boxplots data1 = [np.random.normal(75, 10, 100), np.random.normal(70, 10, 100)] data2 = [np.random.normal(60, 8, 100), np.random.normal(65, 5, 100)] data3 = [np.random.normal(50, 7, 100), np.random.normal(50, 7, 100)] data4 = [np.random.normal(55, 7, 100), np.random.normal(50, 7, 100)] data5 = [np.random.normal(80, 12, 100), np.random.normal(80, 12, 100)] data6 = [np.random.normal(80, 15, 100), np.random.normal(80, 15, 100)] data7 = [np.random.normal(80, 10, 100), np.random.normal(80, 10, 100)] data8 = [np.random.normal(80, 10, 100)] data9 = [np.random.normal(80, 10, 100)]"
481,Direct Mimic,scatter_22,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(12.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/scatter_22.png,ori_500/scatter_22.py,ori_500/scatter_22.png,ori_500/scatter_22.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plottingmodels = [""gpt-4"", ""claude-1"", ""text-davinci-002"", ""claude-2"", ""claude-1-002"", ""text-davinci-003"", ""claude-1-002"", ""text-davinci-003""]strategic_traits = [""Exploration"", ""Risk Taking""]# Performance Comparison for each picture according to the image size to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.gpt-4 = np.array([0.25, 0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 2.00]) # 12.0, 6.0, 2.0, 1.00, 1.75, 2.00]) # 12.0, 6.0, 2.0, 1.00, 1.75, 2.00]) # 12.0, 6.0, 2.0, 1.00, 1.75, 2.00]) # 12.0, 6.0, 2.0, 1.7"
890,Customized Mimic,line_76,"There is a reference image for you and I also have a set of data about the performance scores of different machine learning models across various configurations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The performance score data is as follows:
# Models
models = [""ResNet50"", ""DenseNet121"", ""EfficientNetB0""]
# Configurations
configurations = [""High Performance"", ""Cost Effective"", ""Energy Efficient""]
# Data
data = {
    ""ResNet50"": {
        ""High Performance"": [83.19, 85.67, 84.32, 86.16, 85.89, 86.83, 87.87, 88.2, 89.29, 90.05],
        ""Cost Effective"": [81.78, 80.7, 79.35, 78.62, 77.49, 76.76, 75.92, 75.72, 74.23, 74.53],
        ""Energy Efficient"": [89.47, 90.46, 91.99, 90.97, 91.14, 92.97, 93.81, 94.81, 95.82, 96.93],
    },
    ""DenseNet121"": {
        ""High Performance"": [67.25, 65.01, 69.56, 66.44, 70.24, 68.06, 72.19, 70.02, 74.60, 72.90],
        ""Cost Effective"": [71.18, 69.29, 66.35, 64.98, 62.70, 60.91, 58.74, 56.53, 54.52, 52.31],
        ""Energy Efficient"": [63.97, 65.68, 67.36, 66.92, 67.06, 68.04, 69.00, 70.19, 71.14, 72.99],
    },
    ""EfficientNetB0"": {
        ""High Performance"": [71.49, 72.68, 73.62, 74.16, 75.24, 76.48, 77.07, 78.69, 79.07, 80.69],
        ""Cost Effective"": [81.97, 79.54, 80.22, 78.66, 79.76, 78.56, 76.12, 75.60, 74.30, 72.72],
        ""Energy Efficient"": [70.21, 71.54, 72.00, 71.19, 72.94, 73.24, 74.45, 75.28, 76.04, 77.32],
    },
}
# Label of x axis
xlabel = ""Iteration""
# Label of y axis
ylabel = ""Score""
# Title
titles = [f""Performance of {model}"" for model in models]

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 12.0) to set the image size.
",ori_500/line_76.png,ori_500/line_76.py,customized_500/line_76.png,customized_500/line_76.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart representing the performance scores of different machine learning models across various configurations. Please refer to the reference image and generate Python charts. The performance score data is follows: # Models models = [""ResNet50"", ""DenseNet121"", ""EfficientNet80""] # Configurations for the data that are used for the performance scores of different machine learning models across various configurations. Please note that the score data is not stored in the database and is not a data source. Data is encoded as a string, so we need to ""complete the code"" and append the score to the end of the code. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is not stored in the database. Data is"
441,Direct Mimic,radar_2,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 7.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/radar_2.png,ori_500/radar_2.py,ori_500/radar_2.png,ori_500/radar_2.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the picture that reproduces the picture below. The image size is the original size. Now, please give me the matplotlib code that reproduces the picture below. Starting from 76.1 and ending from 66.4, the picture will be 76.4SQA-I and the textVQA will be 59.3 and the 59.3 and the 59.3 and the 59.3 are the original size. Now, please give me the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.sizes = np.linspace(80, 76.1, 100) + np.random.normal(0, 50.8, 100) + np.random.normal(0, 50.8, 100) + np.random.normal(0, 50.8, 100) + np.random.normal(0, 50.8, 100) + np.random.normal(0, 50.8, 100) + np.random.normal(0, 50.8, 100) + np.random.normal(0, 50.8, 100) + np.random.normal(0, 50.8, 100) + np.random.normal"
750,Customized Mimic,errorpoint_1,"There is a reference image for you and I also have a set of data about time spent on various activities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The activities data is as follows:
# Activities
activities = [""Exercise"", ""Meditation"", ""Sleep"", ""Healthy Eating"", ""Work-life Balance"", ""Medical Checkups"",]
# Mean time spent on each activity
means = np.array([0.0875, 0.1451, 0.1232, 0.1099, 0.0656, 0.0656])
# Standard deviation of time spent on each activity
std_devs = np.array([0.0123, 0.0446, 0.034, 0.0383, 0.0108, 0.0488])
# Mean time spent on all activities
dataset_mean = np.float64(0.0994)
# Label of y axis
ylabel_value = ""Time Spent (Fraction of total time)""
# Labels
label_Mean = ""Mean""
label_Dataset_mean = ""Dataset Mean""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 5.0) to set the image size.
",ori_500/errorpoint_1.png,ori_500/errorpoint_1.py,customized_500/errorpoint_1.png,customized_500/errorpoint_1.py,easy,<<img_src=kathrin img_alt=Kathrin> <img_src=religion img_alt=Religion> <img_src=crime img_alt=Crime and Justice> <img_src=caa img_alt=CAA> <img_src=pulsama img_alt=Pulsama Baubat> <img_src=politics img_alt=Politics>>
180,Direct Mimic,bar_96,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_96.png,ori_500/bar_96.py,ori_500/bar_96.png,ori_500/bar_96.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for demonstration purposes — the picture is not the actual image, but the actual image. Data for example: Random, Ours, SOTA, and random_data = np.random.rand(8, 8) + 13.6 for the picture — the image size is 48.0 and the image size is 49.6 and the image size is 36.5 — the image size is 42.8 — the image size is 56.8 — the image size is 30.6 — the image size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 56.8 — the size is 42.8 — the size is 42.8 — the size is 42.8"
254,Direct Mimic,errorpoint_5,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/errorpoint_5.png,ori_500/errorpoint_5.py,ori_500/errorpoint_5.png,ori_500/errorpoint_5.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the boxplots (replace with actual data)female_pressence_fraction = np.random.normal(0.22, 0.05, 100) # Female pressence fraction of videos obtained by Matplotlib codematplotlib_data = np.random.normal(0.22, 0.05, 100) # Male pressence fraction of videos obtained by Matplotlib codedataset_mean = np.mean(female_pressence_fraction) + np.random.normal(0.22, 0.05, 100) # Female pressence fraction of videos obtained by Matplotlib codedataset_std = np.std(female_pressence_fraction) + np.random.normal(0.22, 0.05, 100) # Male pressence fraction of videos obtained by Matplotlib code# Axes Limits and Labelsxlabel_value = ""Female Pressence (Fraction of videos)""ylabel_value = ""Fraction of videos""title = ""Matplotlib code based on a given picture""# ===================# Part 3: Plot Configuration and Rendering# ===================# Set the figure size to match the original size to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.plt.figure(fig"
96,Direct Mimic,bar_12,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_12.png,ori_500/bar_12.py,ori_500/bar_12.png,ori_500/bar_12.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below.
159,Direct Mimic,bar_75,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_75.png,ori_500/bar_75.py,ori_500/bar_75.png,ori_500/bar_75.py,medium,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the bar chart provided by the image viewer and misleading recall. Data for the misleading recall is 30.1% and 34% of the data is 43.7%. Data for misleading recall is 43.7%. Data for misleading recall is 53.8%. Data for misleading recall is 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%. Data for misleading recall are 20%.
308,Direct Mimic,hist_14,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/hist_14.png,ori_500/hist_14.py,ori_500/hist_14.png,ori_500/hist_14.py,medium,"# Importing Libraries matplotlib.pyplot as plt to create a histogram
import numpy as np; np.random.seed(0) # Generate random data for normal distribution
data = np.random.normal(loc=4, scale=1, size=1000) # Generate uniform data based on the picture based on the picture I provide
normal_data = np.random.normal(loc=6, scale=1, size=1000) # Generate normal data based on the picture based on the picture I provide

# Plotting the histograms of uniform and normal distributions
fig, ax = plt.subplots(figsize=(8, 6))
width = 0.35
# Plot uniform distribution for normal distribution
uniform_data = uniform_data[:, 0] + uniform_data[:, 1] + normal_data[:, 2] + normal_data[:, 3] + normal_data[:, 4] + normal_data[:, 5]
normal_data = normal_data[:, 0] + normal_data[:, 1] + normal_data[:, 2] + normal_data[:, 3] + normal_data[:, 4]"
884,Customized Mimic,line_70,"There is a reference image for you and I also have a set of data about fuel efficiency and emission levels of vehicles with different numbers of sensors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data for the plot
sensors = np.array([2, 3, 4, 5, 6, 7, 8])
fuel_efficiency = np.array(
[30.88, 34.53, 34.82, 31.12, 28.0, 28.0, 30.48]
)
emission_levels = np.array(
[180.0, 199.48, 220.0, 200.72, 187.27, 203.81, 220.0]
)
highlight = [3, 5, 6]

# Axes Limits and Labels
xlabel_value = ""Number of Sensors""
ylabel_value_1 = ""Fuel Efficiency (MPG)""
ylabel_value_2 = ""Emission Levels (g CO2/mile)""

# Labels
label_1 = ""Fuel Efficiency""
label_2 = ""Threshold""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(12.0, 5.0) to set the image size.
",ori_500/line_70.png,ori_500/line_70.py,customized_500/line_70.png,customized_500/line_70.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the plot sensors = np.array([2, 3, 4, 5, 6, 7, 8]) # Fuel efficiency and emission levels of vehicles with different numbers of sensors. File_1 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.0] # Axes Limits and Labels skewed to the right. File_2 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.0] # Labels label_1 = ""Fuel Efficiency"" width = 0.3 # Labels label_2 = ""Threshold"" width = 0.3 # Labels label_3 = ""Emission Levels (g CO2/mile)"" # Labels label_4 = ""Fuel Efficiency (MPG)"" # Labels label_5 = ""Threshold"" # Labels label_6 = ""Accuracy"" # Labels label_7 = ""Label 1"" # Labels label_8 = ""Label 1"" # Labels label_9 = ""Label 2"" # Labels label_10 = ""Label 10"" # Labels label_11 = ""Label 11"" # Labels label_"
748,Customized Mimic,errorbar_29,"There is a reference image for you and I also have a set of data about environmental metrics for urban transportation in three major cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Updated Urban Transportation Data for three major cities
metrics = [""Air Quality"", ""Water Conservation"", ""Renewable Energy""]
values = np.array(
[
[85, 75, 80], # Copenhagen
[70, 65, 75], # Vancouver
[60, 55, 70], # Stockholm
]
)

# Updated asymmetric error values, now more proportionate to the data scale
errors = np.array(
[
[[10, 8], [7, 8], [9, 8]], # Errors for Copenhagen (lower, upper)
[[8, 7], [6, 8], [7, 6]], # Errors for Vancouver
[[7, 6], [6, 5], [8, 7]], # Errors for Stockholm
]
)

# Creating subplots for each city
cities = [""Copenhagen"", ""Vancouver"", ""Stockholm""]

ylabel = ""Environmental Metric Values""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size.
",ori_500/errorbar_29.png,ori_500/errorbar_29.py,customized_500/errorbar_29.png,customized_500/errorbar_29.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for three major cities metrics: # Air Quality, ""Water Conservation"", ""Renewable Energy""] values = np.array([85, 75, 80]) # Updated asymmetic error values, now more proportionate to the data scale errors = np.array([8, 7, 6, 8], [""10, 8], [""7, 8], [""20"", ""15""] # Errors for Vancouver [7, 6], [6, 5], [8, 7]] # Errors for Stockholm ] # Creating subplots for each city cities = [""Copenhagen"", ""Vancouver"", ""Stockholm""] # Updated Urban Transportation Data for three major cities metrics = [""Air Quality"", ""Water Conservation"", ""Renewable Energy""] values = np.array([85, 75, 80]) # Updated asymmetic error values, now more proportionate to the data scale errors = np.array([8, 7, 6], [""10, 8], [""7, 6""], [""8, 7""], [""15"", ""15""] # Errors for Vancouver [7, 6], [""6, 5]"", ""[8, 7]"", ""[8, 7]"", ""[8, 7]"", ""[8, 7]"", ""[8, 7]"", ""[8, 7]"", ""[8, 7]"", ""[8, 7]"", ""[8, 7]"", ""[8, 7]"", ""[8,"
656,Customized Mimic,bar_72,"There is a reference image for you and I also have a set of data about model performance improvements across different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
models = [""Enhanced AI US"", ""Advanced AI UK"", ""Smart AI CA"", ""Intelligent AI AU"", ""NextGen AI NZ""]
improvements = {""US"": [2.8], ""UK"": [-0.6], ""CA"": [4.0], ""AU"": [1.9], ""NZ"": [0.5]}

xlabel = ""Model with Region""
ylabel = ""Improvement [%]""
legendtitle = ""Region""
title = ""Model Performance Improvement by Region""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_72.png,ori_500/bar_72.py,customized_500/bar_72.png,customized_500/bar_72.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data models = [""Enhanced AI US"", ""Advanced AI UK"", ""Smart AI CA"", ""Intelligent AI AU"", ""NextGen AI NZ""] # Improvements = {""US"": [2.8], ""UK"": [-0.6], ""CA"": [4.0], ""AU"": [1.9], ""NZ"": [0.5]} # Xlabel = ""Model with Region"" # Ylabel = ""Improvement [%]"" legendtitle = ""Region"" # Title = ""Model Performance Improvement by Region"" # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Data models = [""Enhanced AI US"", ""Advanced AI UK"", ""Smart AI CA"", ""Intelligent AI AU"", ""NextGen AI NZ""] # Improvements = {""US"": [2.8], ""UK"": [-0.6], ""CA"": [4.0], ""AU"": [1.9], ""NZ"": [0.5]} # Xlabel = ""Model with Region"" # Ylabel = ""Improvement [%]"" legendtitle = ""Region"" # Title = ""Model Performance Improvement by Region"" # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Note that it is necessary to use figsize=(10.0, 6.0) to set the image"
192,Direct Mimic,box_8,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(5.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/box_8.png,ori_500/box_8.py,ori_500/box_8.png,ori_500/box_8.py,medium,"# Importing Libraries for plotting AUC
import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np; np.random.seed(0) # Generate random data for illustration purposes
from matplotlib.patches import Rectangle
# Generating random AUC values for the boxplots for the AUC values
def draw_box_chart(ax, data, x_labels):
    box_width = 0.70 # the width of the bars
    AUC = np.random.uniform(box_width, box_width, size=len(data))
    AUC_labels = [""Only WSI\nModality"", ""Only CNV\nModality"", ""WSI+CNV\nModality""]
    box_labels = [""Only WSI\nModality"", ""Only CNV\nModality"", ""WSI+CNV\nModality""]
    box_xlabel = ""Hospital 1""
    box_ylabel = ""AUC""
    box_title = ""Hospital 2""
    box_xlim = [0.70, 1.00]
    box_ylim = [0.70, 1.00]
    box_xticks = np.arange(0.70, 1.01, 0.02)
    box_yticks = np.arange(0.70, 1.01, 0.02)
    box_xtickslabel = [""Only WSI\nModality"
902,Customized Mimic,multidiff_8,"There is a reference image for you and I also have two sets of performance data for a system. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The performance data is as follows:
# Category of system performance metrics
categories = [""CPU Utilization"", ""Memory Usage"", ""Disk I/O"", ""Network Throughput"", ""Latency"", ""Error Rate""]
# Performance scores
values = [0.9, 0.8, 0.7, 0.6, 0.5, 0.3]
# Label of x axis 1
xlabel_value_1 = ""Performance Score""
# Performance metrics
cpu_performance = np.array([0.34, 0.32, 0.32, 0.31, 0.3, 0.28, 0.28, 0.26, 0.26, 0.25, 0.24, 0.24, 0.22, 0.21, 0.2, 0.19, 0.19, 0.17, 0.17, 0.15, 0.13, 0.14, 0.13, 0.11, 0.12, 0.09])
memory_performance = np.array([0.36, 0.34, 0.34, 0.34, 0.33, 0.3, 0.3, 0.28, 0.28, 0.27, 0.26, 0.26, 0.24, 0.23, 0.22, 0.21, 0.21, 0.19, 0.19, 0.17, 0.15, 0.16, 0.15, 0.13, 0.15, 0.11])
disk_io_performance = np.array([0.33, 0.31, 0.31, 0.31, 0.29, 0.27, 0.27, 0.25, 0.25, 0.24, 0.23, 0.23, 0.21, 0.2, 0.19, 0.18, 0.18, 0.16, 0.16, 0.14, 0.12, 0.13, 0.12, 0.1, 0.11, 0.08])
network_throughput_performance = np.array([0.35, 0.33, 0.33, 0.33, 0.31, 0.28, 0.29, 0.27, 0.26, 0.25, 0.24, 0.24, 0.22, 0.21, 0.2, 0.19, 0.19, 0.16, 0.16, 0.14, 0.11, 0.13, 0.12, 0.09, 0.11, 0.07])
latency_performance = np.array([0.32, 0.3, 0.29, 0.29, 0.28, 0.26, 0.26, 0.24, 0.23, 0.23, 0.21, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.11, 0.11, 0.1, 0.09, 0.09, 0.06])
error_rate_performance = np.array([0.38, 0.35, 0.34, 0.34, 0.33, 0.29, 0.3, 0.27, 0.26, 0.26, 0.24, 0.24, 0.22, 0.21, 0.2, 0.18, 0.18, 0.15, 0.15, 0.12, 0.1, 0.11, 0.1, 0.08, 0.09, 0.05])
# Label of x axis 2
xlabel_value_2 = ""Iterations""
# Label of y axis 2
ylabel_value_2 = ""Performance Metric""
# Labels
label_cpu = ""CPU Utilization""
label_memory = ""Memory Usage""
label_disk_io = ""Disk I/O""
label_network_throughput = ""Network Throughput""
ax2_label_latency = ""Latency""
ax2_label_error_rate = ""Error Rate""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(7.0, 9.0) to set the image size.
",ori_500/multidiff_8.png,ori_500/multidiff_8.py,customized_500/multidiff_8.png,customized_500/multidiff_8.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plottinggen_var = [0.05, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.15]sobol_var = [0.15, 0.25, 0.3, 0.25, 0.3, 0.35, 0.3, 0.3, 0.25, 0.25, 0.25]partial_var = [0.15, 0.2, 0.2, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]no_context = [0.18, 0.22, 0.26, 0.27, 0.28, 0.28, 0.28, 0.29, 0.29, 0.28, 0.29]full_context = [0.18, 0.27, 0.28, 0.28, 0.28, 0.28, 0.2"
602,Customized Mimic,bar_18,"There is a reference image for you and I also have a set of data about hospital quality scores across different medical departments. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data

datasets = [""Cardiology"", ""Neurology"", ""Orthopedics""]
M3 = [45, 60, 55]
M4 = [50, 65, 60]
M5 = [55, 72, 65]
M6 = [60, 70, 60]
M7 = [65, 70, 60]

barWidth = 0.15
r1 = np.arange(len(M3))
r2 = [x + barWidth for x in r1]
r3 = [x + barWidth for x in r2]
r4 = [x + barWidth for x in r3]
r5 = [x + barWidth for x in r4]
labels = [""Hospital A"", ""Hospital B"", ""Hospital C"", ""Hospital D"", ""Hospital E""]
ylabel = ""Quality Score""
title = ""Quality Scores of Hospitals Across Different Departments""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_18.png,ori_500/bar_18.py,customized_500/bar_18.png,customized_500/bar_18.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here, you must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.def create_chart(df, title): # Reference image for you and I also have a set of data about hospital quality scores across different medical departments. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.def create_reference_image(df, title): # Reference image for you and I also have a set of data about hospital quality scores across different medical departments. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10.0, 6.0) to"
472,Direct Mimic,scatter_13,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/scatter_13.png,ori_500/scatter_13.py,ori_500/scatter_13.png,ori_500/scatter_13.py,easy,"# Plot average relative error vs. test case index
fig, ax = plt.subplots(figsize=(8, 6))
ax.errorbar(x, y, xerr=errors, fmt=""o"", color=""black"", capsize=5, ecolor=""black"", capthick=2)
ax.set_xlabel(""Test Case Index"")
ax.set_ylabel(""Average Relative Error, u"")
ax.grid(True, which=""both"", axis=""y"")
ax.set_ylim(0.01, 0.08)"
87,Direct Mimic,bar_3,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 3.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_3.png,ori_500/bar_3.py,ori_500/bar_3.png,ori_500/bar_3.py,medium,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting provided by the picture below and the matplotlib code that reproduces the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below. Data for matplotlib is given in the picture below.
585,Customized Mimic,bar_1,"There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Scores for different modes of transportation
car = (0, 0.4, 0.6, 0.2)
bicycle = (0, 0.5, 0.7, 0.3)
train = (0, 0.6, 0.5, 0.1)
bus = (0, 0.3, 0.4, 0.2)
airplane = (0, 0.2, 0.3, 0.1)
# Label of y axis
ylabel_value = ""Scores""
# Legend labels for each mode of transportation
legend_labels = (""Car"", ""Bicycle"", ""Train"", ""Bus"", ""Airplane"",)

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(7.0, 5.0) to set the image size.
",ori_500/bar_1.png,ori_500/bar_1.py,customized_500/bar_1.png,customized_500/bar_1.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows: # Scores for different modes of transportation car = (0, 0.4, 0.6, 0.2) bicycle = (0, 0.5, 0.7, 0.3) train = (0, 0.6, 0.5, 0.1) bus = (0, 0.3, 0.4, 0.2) airplane = (0, 0.2, 0.3, 0.1) # Label of y-axis y-label_value = ""Scores"" # Legend labels for each mode of transportation legend_labels = {""Car"", ""Bicycle"", ""Train"", ""Bus"", ""Airplane""}, # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows: # Scores for different modes of transportation car = (0, 0.4, 0.6, 0.2) bicycle = (0, 0.5, 0.7, 0.3) train = (0, 0.6, 0.5, 0.1) bus = (0, 0.3, 0.4, 0.2) airplane = (0, 0.2"
275,Direct Mimic,heatmap_11,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/heatmap_11.png,ori_500/heatmap_11.py,ori_500/heatmap_11.png,ori_500/heatmap_11.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the heatmap based on the picture providedplayers = [np.random.randint(1, 10, 100) for _ in range(10)]scores = [np.random.randint(1, 10, 100) for _ in range(10)]title = ""Players""xlabel = ""Players""ylabel = ""Scores""# ===================# Part 3: Plot Configuration and Rendering# ===================# Create a figure with the specified size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.fig, ax = plt.subplots(figsize=(8, 8)) # Adjust the size to match the original image's dimensions. Customize the colormap to match the original image's dimensions. Customize the colormap to match the original image's dimensions. Customize the matplotlib code to match the original image's dimensions. Customize the matplotlib code to match the original image's dimensions. Customize the matplotlib code to match the original image's dimensions. Customize the matplotlib code to match the original image's dimensions. Customize the matplotlib code to match the original image's dimensions. Customize the matplotlib code to match the original image's dimensions. Customize the matplotlib code to match the original image's dimensions. Customize the"
919,Customized Mimic,multidiff_25,"There is a reference image for you and I also have a set of data about student performance and university ratings across different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data for Picture in Picture bar plot

# Known and unknown test scores distribution for different subjects
known_scores = np.array(
[37, 45, 78, 75, 70, 65, 60, 38, 55, 60, 75]
)
unknown_scores = np.array(
[60, 55, 53, 50, 48, 45, 40, 48, 35, 30, 25]
)
bins = np.linspace(0, 100, 11) # Exam scores ranging from 0 to 100

# Data for the heatmap representing university ratings across different regions
university_ratings = np.array(
[
[98, 92, 85, 78, 72, 65],
[95, 90, 82, 75, 70, 60],
[92, 88, 80, 72, 68, 55],
[90, 85, 78, 70, 65, 50],
[88, 82, 75, 68, 62, 45],
]
)
x_labels = [
""Uni A"",
""Uni B"",
""Uni C"",
""Uni D"",
""Uni E"",
""Uni F"",
]
y_labels = [""Region 1"", ""Region 2"", ""Region 3"", ""Region 4"", ""Region 5""]
bar_labels = [""Known Scores"", ""Unknown Scores""]
xlabels = [""Score Range"", ""Universities""]
ylabels = [""Number of Students"", ""Regions""]
cbarlabel = ""University Ratings""
insetaxes = [0.251, 0.65, 0.1, 0.2]
insetxlim = [40, 80]

# Data for bar chart showing student enrollment by field
fields = [""Science"", ""Engineering"", ""Arts"", ""Business"", ""Law"", ""Medicine""]
enrollment = [520, 470, 510, 390, 350, 400]

# Redefined data for histogram representing student enrollment distribution by region
urban_enrollment = np.random.normal(1000, 200, 1000) # Enrollment in urban areas
rural_enrollment = np.random.normal(600, 150, 1000) # Enrollment in rural areas
bins_enrollment = np.linspace(0, 2000, 30) # Uniform bin size for histograms

# Titles for the plots
titles = [""Student Scores Distribution"", ""University Ratings by Region"", ""Student Enrollment Distribution""]
xlabels = [""Score Range"", ""Universities"", ""Enrollment Count""]
ylabels = [""Number of Students"", ""Regions"", ""Frequency""]

# Placeholder to show where histograms, bar charts, and heatmaps would be displayed. Actual plotting code is not included.


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size.
",ori_500/multidiff_25.png,ori_500/multidiff_25.py,customized_500/multidiff_25.png,customized_500/multidiff_25.py,hard,# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as pltimport matplotlib.gridspec as gridspec# ===================# Part 2: Data Preparation# ===================# Data for Picture in Picture bar plot with known and unknown sales and enrollment in rural areas enrollment in urban areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas enrollment in rural areas
196,Direct Mimic,box_12,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/box_12.png,ori_500/box_12.py,ori_500/box_12.png,ori_500/box_12.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the boxplots (replace with actual data)data = np.random.rand(4, 6) * 3.5 + 3.5 # 4.0 values for the picture based on the picture providedxlabel = ""AlphaBeta""ylabel = ""z""title = ""Gamma(y = 0.05)""# ===================# Part 3: Plot Configuration and Rendering# ===================# Create a figure and axis with the specified size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.fig, ax = plt.subplots(figsize=(8, 6)) # Adjust the size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Add a boxplot to the left of the image to match the original size. Here, I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.boxprops = dict(linestyle=""-"", linewidth=2, color=""black"") # Adjust the boxprops to match the original size. Customize the boxplots to match the original size. Customize the boxplots to match the original size"
505,Customized Mimic,3d_6,"There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# X-axis data
X = np.arange(-10, 10, 0.5)
# Y-axis data
Y = np.arange(-10, 10, 0.5)
# Z-axis data (surface height values)
Z = np.cos(X / 2) * np.sin(Y / 2)
# Label of x axis
xlabel_value = ""Longitude""
# Label of y axis
ylabel_value = ""Latitude""
Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/3d_6.png,ori_500/3d_6.py,customized_500/3d_6.png,customized_500/3d_6.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows: # X-axis data X = np.arange(-10, 10, 0.5) # Y-axis data Y = np.arange(-10, 0.5) # Z-axis data (surface height values) Z = np.cos(X / 2) * np.sin(Y / 2) # Label of x axis xlabel_value = ""Longitude"" # Label of y axis ylabel_value = ""Latitude"" Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.# ===================# Part 3: Plot Configuration and Rendering# ===================fig = plt.figure(figsize=(8, 8)) # Adjusting figure size to match the original image dimensions and save to file."
809,Customized Mimic,hist_15,"There is a reference image for you and I also have a set of data about annual sales in millions for a number of businesses. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The annual sales data is as follows:
# Annual sales data (in millions)
data = np.array([76.46, 56.00, 64.68, 83.61, 78.01, 35.34, 64.25, 47.73, 48.45, 56.16, 52.16, 71.81, 61.42, 51.83, 56.66, 55.01, 72.41, 46.92, 54.70, 37.19, 
                 11.71, 59.80, 62.97, 38.87, 84.05, 28.18, 50.69, 47.19, 72.99, 72.04, 52.32, 55.67, 36.68, 20.29, 44.78, 52.35, 68.45, 68.04, 44.19, 45.47, 
                 34.27, 28.70, 24.41, 79.26, 42.36, 43.43, 31.21, 61.66, 25.79, 46.81, 36.57, 55.80, 42.34, 32.29, 49.58, 56.42, 50.99, 54.54, 40.49, 44.56, 
                 39.91, 44.61, 37.80, 24.11, 52.66, 43.97, 25.55, 56.94, 36.39, 50.78, 60.94, 51.93, 67.09, 31.48, 56.04, 39.73, 36.94, 41.32, 45.33, 50.84, 
                 32.52, 63.51, 56.98, 26.96, 72.32, 78.44, 67.68, 47.30, 33.94, 65.82, 43.95, 68.34, 53.12, 64.65, 55.35, 60.60, 50.16, 76.79, 51.90, 56.03])
# Label of x axis
xlabel_value = ""Annual Sales (in millions)""
# Label of y axis
ylabel_value = ""Number of Businesses""
# Title
 title = ""Histogram of Annual Sales""
Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/hist_15.png,ori_500/hist_15.py,customized_500/hist_15.png,customized_500/hist_15.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points. Data for the histogram of wind speed measurements in millions of data points.
76,Direct Mimic,PIP_7,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/PIP_7.png,ori_500/PIP_7.py,ori_500/PIP_7.png,ori_500/PIP_7.py,hard,"# Plot the raw data to represent the picture
matplotlib.rcParams[""figure.figsize""] = (10, 8)
plt.plot(WI, label=""WI"")
plt.plot(ISQ, label=""ISQ"")
plt.legend()
plt.xlabel(""Time Steps"")
plt.ylabel(""Discounted cumulative reward"")"
769,Customized Mimic,heatmap_5,"There is a reference image for you and I also have a set of data about energy consumption from different sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Placeholder data for energy consumption matrices
data_solar = np.array([[50, 10, 5, 0], [8, 40, 2, 0], [3, 7, 25, 5], [0, 0, 4, 40]])
data_wind = np.array([[45, 12, 3, 0], [5, 30, 8, 2], [1, 6, 15, 10], [0, 0, 5, 35]])
data_hydro = np.array([[100, 20, 5, 5], [15, 70, 20, 10], [5, 15, 55, 25], [0, 0, 10, 95]])
data_nuclear = np.array([[300, 50, 20, 10], [30, 200, 80, 20], [10, 50, 250, 60], [0, 5, 70, 300]])
data_coal = np.array([[200, 60, 30, 10], [40, 150, 50, 20], [20, 40, 130, 60], [5, 10, 50, 200]])
data_natural_gas = np.array([[350, 90, 40, 20], [80, 220, 90, 60], [30, 70, 250, 100], [10, 20, 60, 350]])
data_biomass = np.array([[25, 5, 2, 1], [5, 15, 8, 2], [2, 5, 12, 4], [1, 2, 5, 18]])
data_geothermal = np.array([[500, 100, 50, 20], [90, 300, 150, 50], [40, 100, 350, 150], [20, 30, 120, 400]])

# Titles for the subplots
titles = [""Solar"", ""Wind"", ""Hydro"", ""Nuclear"", ""Coal"", ""Natural Gas"", ""Biomass"", ""Geothermal""]
xlabel = ""Predicted usage category""
ylabel = ""Actual usage category""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(12.0, 6.0) to set the image size.
",ori_500/heatmap_5.png,ori_500/heatmap_5.py,customized_500/heatmap_5.png,customized_500/heatmap_5.py,hard,# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data for the heatmap and gridspec charts for the reference image and accurately represent my data. Data
681,Customized Mimic,bar_97,"There is a reference image for you and I also have a set of data about quality inspection scores across different factories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Seed for reproducibility

# Sample data
annotators = [""Wang"", ""Li"", ""Zhang"", ""Chen"", ""Liu"", ""Yang""]
base_scores = {
""Factory Alpha"": np.random.randint(50, 100, (7, 5)),
""Factory Beta"": np.random.randint(50, 100, (7, 5)),
""Factory Gamma"": np.random.randint(50, 100, (7, 5)),
""Factory Delta"": np.random.randint(50, 100, (7, 5)),
}
title = ""Quality Inspection Scores Across Factories""
xlabel = ""Inspector""
ylabel = ""Inspection Scores""
legendlabels = [""Safety"", ""Efficiency"", ""Compliance"", ""Maintenance"", ""Overall""]
legendtitle = ""Inspection Criteria""

# Normalize the scores for each dataset so that each annotator's scores sum to 60
normalized_scores = {}
for key, data in base_scores.items():
normalized_scores[key] = np.array([60 * score / np.sum(score) for score in data])


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/bar_97.png,ori_500/bar_97.py,customized_500/bar_97.png,customized_500/bar_97.py,medium,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as pltimport matplotlib.colors as mcolors# ===================# Part 2: Data Preparation# ===================scores_1 = [1, 2, 3, 4, 5, 6] # Human Labeling and Agreement Bias Checking # Score Type 1 для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для annotations для "
933,Customized Mimic,pie_14,"There is a reference image for you and I also have a set of data about the distribution of technology usage in our company. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Categories of technology
categories = [""Software Development"", ""Data Analysis"", ""Network Security"", ""Cloud Services"", ""Hardware Maintenance""]
# Usage distribution percentages
sizes = [30, 25, 15, 20, 10]
# Colors for each category
colors = [""#ff9999"", ""#66b3ff"", ""#99ff99"", ""#ffcc99"", ""#c2c2f0""]
# Title for the chart
title_text = ""Technology Usage Distribution""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.
",ori_500/pie_14.png,ori_500/pie_14.py,customized_500/pie_14.png,customized_500/pie_14.py,easy,# Importing Libraries Data Preparation Data for Python matplotlib.pyplot as plt Data for Nutritional Distribution Nutritional Distribution Nutritional Distribution Proteins Proteins Vegetables Grains Grains Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Proteins Proteins Proteins Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetables Vegetable
17,Direct Mimic,CB_3,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/CB_3.png,ori_500/CB_3.py,ori_500/CB_3.png,ori_500/CB_3.py,hard,"# Plot the model's prediction against the actual image

import matplotlib.pyplot as plt; plt.figure(figsize=(8, 8))

# Plot the predicted probability and the calibration curve
plt.scatter(x_pred, y_pred, c=""orange"", edgecolor=""black"", s=100, label=""Data points"")
plt.plot(x_pred, y_pred, c=""steelblue"", edgecolor=""black"", label=""Bin edges"")
plt.plot(x_calibration, calibration_curve, c=""black"", edgecolor=""black"", label=""Calibration curve"")

# Add calibration curve to the model
plt.axvline(x = 1, color=""gray"", linestyle=""--"", linewidth=1)
plt.axhline(y = 1, color=""gray"", linestyle=""--"", linewidth=1)
plt.axvline(x = 1, color=""gray"", linestyle=""--"", linewidth=1)"
536,Customized Mimic,CB_22,"There is a reference image for you and I also have a set of data about travel statistics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Define the data for each subplot using random numbers and normal distribution
total_distance_data = np.random.normal(500, 50, 1000) # Total Distance Traveled in miles
average_speed_data = np.random.normal(60, 5, 1000) # Average Speed in mph
fuel_consumption_data = np.random.normal(15, 2, 1000) # Fuel Consumption in gallons
travel_time_data = np.random.normal(8, 1, 1000) # Travel Time in hours

titles = [""Total Distance Traveled"", ""Average Speed"", ""Fuel Consumption"", ""Travel Time""]
xlabels = [""Miles"", ""Miles per hour"", ""Gallons"", ""Hours""]
ylabels = [""Probability"", ""Probability"", ""Probability"", ""Probability""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/CB_22.png,ori_500/CB_22.py,customized_500/CB_22.png,customized_500/CB_22.py,medium,"# Create a figure with 4 subplots and 2 subplots.
fig, axs = plt.subplots(2, 2, figsize=(10, 8))

# Plot the reference image and generate a chart that exactly mirrors the style of the reference image and accurately represents my data.
axs[0].hist(total_distance_traveled, bins=160, density=True, color=""blue"")
axs[0].set_title(""Total"")
axs[0].set_xlabel(""Daily reward (Ether)"")
axs[0].set_ylabel(""Probability"")
axs[0].set_xlim(1340, 1725)
axs[0].set_ylim(0.0000, 0.0200)
axs[0].set_xticks(1340, 1360, 1380, 1400, 1420)
axs[0].set_xticklabels([""1340"", ""1360"", ""1380"", ""1420"", ""1440""])
axs[0"
572,Customized Mimic,PIP_3,"There is a reference image for you and I also have a set of data about average temperature by season and region. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
x = [""Spring"", ""Summer"", ""Fall"", ""Winter""]
y1 = [12.5, 15.0, 10.0, 8.0]
y2 = [14.0, 16.5, 11.5, 7.8]
y3 = [13.5, 14.5, 12.0, 9.0]
y4 = [11.0, 17.0, 9.5, 6.5]
labels = [""North Region"", ""South Region"", ""East Region"", ""West Region""]
insertax1 = [0.2, 0.2, 0.1, 0.3]
insertax2 = [0.8, 0.5, 0.1, 0.3]
xlabel = ""Season""
ylabel = ""Average Temperature (¬∞C)""
title = ""Average Temperature by Season and Region""
insetaxes = [0.45, 0.2, 0.1, 0.3]
arrowend1 = [0.45, 0.48]
arrowend2 = [0.90, 0.45]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/PIP_3.png,ori_500/PIP_3.py,customized_500/PIP_3.png,customized_500/PIP_3.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plottingbias_values = [8, 6.4, 6.3, 6.1, 6.0] # Bias score for the reference image and accurately represents my data. Here, you must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 6.0) to set the image size.# Bias score for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.          # Data x = [""Spring"", ""Summer"", ""Fall"", ""Winter""] # Data y1 = [12.5, 15.0, 10.0, 8.0] y2 = [14.0, 16.5, 7.8] y3 = [13.5, 14.5, 12.0, 9.0] y4 = [11.0, 17.0, 9.5, 6.5] # Data is directly executable. Here that it is necessary to use figsize=(10, 6.0) to set the model's bias score.# Create a grid of points to indicate the bias score for the reference image and accurately represents my data. Here, you must copy the data I provide completely into your code, and ensure that the code you generate"
123,Direct Mimic,bar_39,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_39.png,ori_500/bar_39.py,ori_500/bar_39.png,ori_500/bar_39.py,easy,<<<img_src=recost_1 img_alt=Recost (1%) wins> <img_src=tie_1 img_alt=Tie> <img_src=alpaca_1 img_alt=Alpaca wins>> <img_src=lima_179 img_alt=LIMA> <img_src=slnstruct_99 img_alt=Slnstruct> <img_src=wizardLM_116 img_alt=WizardLM> <img_src=koala_80 img_alt=Koala> <img_src=vicuna_60 img_alt=Vicuna>>
45,Direct Mimic,HR_1,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 3.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/HR_1.png,ori_500/HR_1.py,ori_500/HR_1.png,ori_500/HR_1.py,hard,"# Importing Libraries for Matplotlib Code
import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np; np.random.seed(0) # Generate random data for illustration
from matplotlib.colors import LinearSegmentedColormap
from matplotlib.patches import Rectangle
# Generating random data for illustration
data = np.random.rand(100, 5) * 1.76 + 176 # Sample data for illustration
random_data = data[:, 0] + 176 # Sample data for illustration
# Adding text labels and title for the chart
titles = [""Depth"", ""Edge"", ""Normals"", ""Semseg""] # Add text labels and title for the chart
# Adding text size to the chart
fig, axs = plt.subplots(1, 4, figsize=(10, 5))"
866,Customized Mimic,line_52,"There is a reference image for you and I also have a set of data about plant growth over days. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data for four different scenarios
# Scenario 1: Sensor readings over time
time1 = np.array([1, 2, 3, 4, 5])
sensor_readings = np.array([20, 21, 19, 22, 20])
sensor_errors = np.array([1, 0.5, 1.5, 1, 0.8])

# Scenario 2: Temperature measurements at different altitudes
altitudes = np.array([100, 200, 300, 400])
temperatures = np.array([15, 14, 13, 12])
temp_errors = np.array([0.5, 0.3, 0.4, 0.6])

# Scenario 3: Sales over different months
months = np.array([1, 2, 3, 4, 5, 6])
sales = np.array([150, 160, 155, 165, 170, 175])
sales_errors = np.array([10, 5, 7, 6, 8, 9])

# Scenario 4: Growth of a plant over days
days = np.array([1, 3, 5, 7, 9])
plant_growth = np.array([2, 2.5, 3, 3.5, 4])
growth_errors = np.array([0.2, 0.3, 0.25, 0.3, 0.2])

# Titles for each subplot
titles = [
""Sensor Readings Over Time"",
""Temperature Measurements at Different Altitudes"",
""Sales Over Six Months"",
""Plant Growth Over Days"",
]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/line_52.png,ori_500/line_52.py,customized_500/line_52.png,customized_500/line_52.py,easy,"# Create a grid of points with specific color and marker sizes to match the picture provided.
# Plot the data with different scenarios.
plt.figure(figsize=(10, 8))
plt.subplot(2, 2, 1)
plt.errorbar(x, y, xerr=error_std, fmt=""o"", color=""blue"")
plt.errorbar(x, y, xerr=error_std, fmt=""o"", color=""red"")
plt.title(""(a) Positive bound"")
plt.subplot(2, 2, 2)
plt.errorbar(x, y, xerr=error_std, fmt=""o"", color=""blue"")
plt.title(""(b) Negative bound"")
plt.subplot(2, 2, 3)
plt.errorbar(x, y, xerr=error_std, fmt=""o"", color=""blue"")"
791,Customized Mimic,heatmap_27,"There is a reference image for you and I also have a set of data about exponential distribution values. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
Z = np.random.exponential(1 / 20, (6, 10))
titles = [""Cheng"", ""Cheng with Thick Edges""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size.
",ori_500/heatmap_27.png,ori_500/heatmap_27.py,customized_500/heatmap_27.png,customized_500/heatmap_27.py,medium,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here, I create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note that it is necessary to use figsize=(6.0, 4.0) to set the image size.def generate_chart(x, y): # Create a grid of x and add a grid of y to create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here, I create a grid of y that is directly executable. Here, I add a grid of x and add a grid of y to create a grid of y. Here, I add a grid of x and add a grid of y. Here, I add a grid of y. Here, I add a grid of y. Here, I add a grid of x and add a grid of y. Here, I add a grid of y. Here, I add a grid of x and add a grid of y. Here, I add a grid of y. Here, I add a grid of x and add a grid of y. Here, I add a grid of y. Here, I add a grid of y. Here, I add a grid of x and add a grid of y. Here, I add a grid of y. Here, I add a grid of y. Here, I add a grid of y. Here, I add a grid of y. Here, I add a grid"
490,Direct Mimic,violin_1,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 7.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/violin_1.png,ori_500/violin_1.py,ori_500/violin_1.png,ori_500/violin_1.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for demonstration purposesx1 = np.random.normal(1, 2, 100) # 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100 samples from 100"
487,Direct Mimic,tree_3,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(12.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/tree_3.png,ori_500/tree_3.py,ori_500/tree_3.png,ori_500/tree_3.py,easy,<<img_src=adidas_13.42_1 img_alt=Adidas> <img_src=under_armour_8.54_1 img_alt=Under Armour> <img_src=new_balance_6.26_1 img_alt=New Balance> <img_src=reebok_10.91_1 img_alt=Reebok> <img_src=puma_14.21_1 img_alt=Puma>>
600,Customized Mimic,bar_16,"There is a reference image for you and I also have two sets of data about task distribution for different roles. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The task distribution data is as follows:
# Roles
roles = [""Researcher"", ""Analyst"", ""Engineer""]
# Task counts for Scenario 1
counts_s1 = np.array([[200, 400, 100], [350, 150, 200], [300, 100, 300]])  # Each row sums to 700
# Task counts for Scenario 2
counts_s2 = np.array([[180, 320, 200], [240, 260, 200], [290, 230, 180]])  # Each row sums to 700
# Label of x axis
xlabel_value = ""Task Count""
# Label of y axis
ylabel_value = ""Role""
# Titles
title_s1 = ""Task Distribution in Scenario 1""
title_s2 = ""Task Distribution in Scenario 2""
fig_title = ""Task Distribution Comparison for Different Roles""
# Labels
legend_labels = [""Data Collection"", ""Analysis"", ""Reporting""]

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/bar_16.png,ori_500/bar_16.py,customized_500/bar_16.png,customized_500/bar_16.py,medium,<img_src=s1 img_alt=s1>
504,Customized Mimic,3d_5,"There is a reference image for you and I also have a set of data about human body joint positions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# data
ap = np.array(
[
[
0.06,
0.01,
-0.0,
0.01,
0.11,
0.04,
0.08,
0.05,
0.04,
0.01,
0.05,
0.16,
0.2,
0.16,
-0.03,
-0.17,
-0.07,
],
[
0.07,
0.19,
0.14,
0.21,
-0.04,
-0.04,
-0.02,
0.11,
0.1,
-0.02,
0.05,
-0.04,
-0.14,
-0.12,
0.12,
0.22,
0.14,
],
[
0.37,
0.43,
-0.1,
-0.53,
0.42,
-0.1,
-0.53,
0.6,
0.84,
0.89,
1.01,
0.81,
0.62,
0.5,
0.82,
0.66,
0.5,
],
]
)


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(7.0, 7.0) to set the image size.
",ori_500/3d_5.png,ori_500/3d_5.py,customized_500/3d_5.png,customized_500/3d_5.py,medium,# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and accurately represents my data. Data for the reference image and
826,Customized Mimic,line_12,"There is a reference image for you and I also have a set of data about the standard deviation of side effects at different dosage levels for young, adult, and elderly patients. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Dosage levels
dosage_levels = [0.2, 0.4, 0.6, 0.8, 1.00]
# Standard deviation of side effects for young patients
std_side_effects_young = [0.7, 0.5, 0.3, 0.6, 0.8]
# Standard deviation of side effects for adult patients
std_side_effects_adult = [0.6, 0.45, 0.4, 0.35, 0.5]
# Standard deviation of side effects for elderly patients
std_side_effects_elderly = [0.2, 0.35, 0.25, 0.5, 0.37]
# Label of x axis
xlabel_value = ""Dosage Levels (mg)""
# Label of y axis
ylabel_value = ""Std of Side Effects""
# Labels
line_label_young = ""Young Patients""
line_label_adult = ""Adult Patients""
line_label_elderly = ""Elderly Patients""
Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/line_12.png,ori_500/line_12.py,customized_500/line_12.png,customized_500/line_12.py,easy,<>
770,Customized Mimic,heatmap_6,"There is a reference image for you and I also have a set of data about population distribution across major cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Define the data with correct shape
data = np.array(
[
[1200, 950, 875, 1020, 675, 800],
[900, 1100, 650, 780, 950, 1125],
[1000, 850, 900, np.nan, 700, np.nan], # Assumed another NaN value for padding
[670, 720, 800, 940, 850, 920],
]
)

title = ""Population Distribution Across Major Cities (in thousands)""
xlabel = ""Regions""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/heatmap_6.png,ori_500/heatmap_6.py,customized_500/heatmap_6.png,customized_500/heatmap_6.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. Here the data with correct shape data = np.array([1200, 950, 875, 1020, 675, 800]) [1100, 925, 950, 1125] [1000, 850, 900, np.nan, 700, np.nan], # Assumed another NAN value for padding (670, 720, 800, 940, 850, 920], # Assuming another NAN value for padding (670, 720, 800, 940, 920], # Assuming another NAN value for padding (670, 720, 800, 940, 920], # Assuming another NAN value for padding (670, 720, 800, 940, 920], # Assuming another NAN value for padding (670, 720, 800, 940, 920], # Assuming another NAN value for padding (670, 720, 800, 940, 920], # Assuming another NAN value for"
564,Customized Mimic,HR_20,"There is a reference image for you and I also have a set of data about average goals scored by different sports teams. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data
categories = [""Female Team"", ""Male Team"", ""Mixed Team"", ""Youth Team""]
models = [
""Method A"",
""Method B"",
""Method C"",
""Method D"",
""Method E"",
]

# Random values for demonstration (average goals scored)
values = np.random.rand(4, 5) * 3 + 2 # Adjusted range for sports goals

# Reference lines (e.g., league average goals)
referlines = [2.5, 3.2, 4, 4.5, 5]

# Labels and limits relevant to sports
ylabel = ""Average Goals Scored per Match""
arrowstart = (0.05, 0.03)
arrowend = (0.48, 0.03)
arrowstart2 = (0.55, 0.03)
arrowend2 = (0.9, 0.03)

# Text positions and labels for annotations
textposition = [[0.5, 1], [2.5, 1]]
textlabel = ""Training Effectiveness""
spanposition = [[-0.5, 1.5], [1.5, 3.5]]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size.
",ori_500/HR_20.png,ori_500/HR_20.py,customized_500/HR_20.png,customized_500/HR_20.py,hard,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and calculates the data and is directly executable. Note that it is necessary to use figsize=(10.0, 5.0) to set the image size.# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for the chart that accurately mirrors"
42,Direct Mimic,CB_28,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/CB_28.png,ori_500/CB_28.py,ori_500/CB_28.png,ori_500/CB_28.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the density plots for the picture based on the picture based on the picture I provide. Note that it is necessary to use figsize=(10.0, 5.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below. Continuing to use matplotlib.lines as the background color for the picture, I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Note that it is necessary to use figsize=(10.0, 5.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# ===================# Part 3: Plot Configuration and Rendering# ===================fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5)) # Adjusting figure size to match the original size. Now, please give me the matplotlib code that reproduces the picture below."
613,Customized Mimic,bar_29,"There is a reference image for you and I also have a set of data about log L2 error in different fields of physics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Fields of physics
categories = [""Electrodynamics"", ""Quantum Mechanics"", ""Thermodynamics"", ""Fluid Dynamics"", ""Acoustics"", ""Astrophysics""]
# log L2 Error for Finite Element
rbf_int = [2e-2, 5e-3, 2e-2, 3e-2, 4e-3, 2e-2] 
# log L2 Error for Spectral Method
rbf_pol = [3e-2, 6e-4, 2e-2, 3e-2, 5e-3, 3e-2] 
# log L2 Error for Finite Difference
rbf_com = [4e-2, 7e-3, 2e-2, 4e-2, 3e-3, 4e-2]
# Label of x axis
xlabel = ""Fields""
# Label of y axis
ylabel = ""log L2 Error""
# Labels
label_rbf_int = ""Finite Element""
label_rbf_pol = ""Spectral Method""
label_rbf_com = ""Finite Difference""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_29.png,ori_500/bar_29.py,customized_500/bar_29.png,customized_500/bar_29.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting and generating the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows: # Fields of physics categories = [""Fieldds of physics"", ""Quantum Mechanics"", ""Thermodynamics"", ""Acoustics"", ""Astrophysics""] # Log L2 Error for Finite Element rbf_int = [2e-2, 5e-3, 2e-2, 3e-3, 2e-2] # log L2 Error for Spectral Method rbf_pol = [3e-2, 6e-4, 2e-2, 3e-2, 5e-3] # log L2 Error for Finite Difference rbf_com = [4e-2, 7e-3, 2e-2, 4e-3, 4e-2] # Label of x axis xlabel = ""Fields"" # Labels label_rbf_int = ""Fields"" # Labels label_rbf_pol = ""Fields"" # Labels label_rbf_int = ""Fields"" # Labels label_rbf_com = ""Finite Difference"" # Labels label_rbf_int = ""Fields"" # Labels label_rbf_com = ""Finite Difference"" # Labels label_rbf_int = ""Fields"" # Labels label_rbf_"
734,Customized Mimic,errorbar_15,"There is a reference image for you and I also have a set of data about different categories and their assessment scores in various methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data
categories = [""Renewable"", ""AI Systems"", ""Healthcare""]
methods = [""EnvImpact"", ""ModelAccuracy"", ""ServiceQuality"", ""TechInnovation""]
performance = np.array([[65, 75, 85, 75], [85, 75, 80, 85], [75, 85, 80, 85]])
errors = np.array([[8, 9, 5, 5], [5, 9, 4, 3], [8, 3, 4, 3]])
ylabel = ""Assessment Score""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 3.0) to set the image size.
",ori_500/errorbar_15.png,ori_500/errorbar_15.py,customized_500/errorbar_15.png,customized_500/errorbar_15.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.  # Data for the reference image and accurately represents my data.  # Data for the code that contains the data and is directly executable. Note that it is necessary to use figsize=(10, 3.0) to set the image size. Continuing to use figsize=(10, 3.0) to set the image size.# Reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 3.0) to set the image size.# Reference image and generate Python matplotlib code that can create a chart that accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 3.0) to set the image size.# Reference image and generate Python matplotlib code that can create a chart that accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=("
847,Customized Mimic,line_33,"There is a reference image for you and I also have a set of data about vehicle fuel efficiency. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Sample data (replace with actual values)
test_samples = [20, 40, 60, 80, 100]
sedan_efficiency = [25, 27, 28, 29, 30]
suv_efficiency = [22, 24, 25, 26, 27]
truck_efficiency = [18, 20, 21, 22, 23]
ev_efficiency = [100, 105, 108, 110, 112]

# Axes Limits and Labels
xlabel_value = ""Number of Test Samples""

ylabel_value = ""Fuel Efficiency (MPG)""

# Labels
label_sedan = ""Sedan""
label_suv = ""SUV""
label_truck = ""Truck""
label_ev = ""Electric Vehicle""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size.
",ori_500/line_33.png,ori_500/line_33.py,customized_500/line_33.png,customized_500/line_33.py,easy,<<img_src=f1_chart_1> <img_src=f1_chart_2> <img_src=f1_chart_3> <img_src=f1_chart_4>>
334,Direct Mimic,line_20,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(16.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_20.png,ori_500/line_20.py,ori_500/line_20.png,ori_500/line_20.py,medium,"# Importing Libraries for plotting matplotlib.pyplot as plt.rcParams[""figure.figsize""] = (10, 8) # Adjusted to match the original image's dimensions.
import matplotlib.lines as mlines as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatch"
945,Customized Mimic,radar_6,"There is a reference image for you and I also have a set of data about different scoring metrics for various systems. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Define the data for each line
values_predicted = [0.05, 0.12, 0.09, 0.14, 0.07, 0.10]
values_help = [0.10, 0.08, 0.11, 0.09, 0.13, 0.06]
values_rs = [0.07, 0.15, 0.05, 0.12, 0.10, 0.08]
values_rhpn = [0.12, 0.07, 0.14, 0.06, 0.11, 0.13]
labels = [""predicted_score"", ""helpful_score"", ""result_score"", ""rating_score""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.
",ori_500/radar_6.png,ori_500/radar_6.py,customized_500/radar_6.png,customized_500/radar_6.py,medium,<>
412,Direct Mimic,multidiff_18,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 10.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/multidiff_18.png,ori_500/multidiff_18.py,ori_500/multidiff_18.png,ori_500/multidiff_18.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the charts for the three categories (hardware, software, AI)tech_gaps = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022] # Technology gaps across different sectors in the data for the picture providedai_gaps = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022] # Hardware gaps across different sectors in the data for the picture providedgovernment_gaps = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022] # Government gaps across different sectors in the data for the picture provided# Data for the boxplots for each categoryfig, axs = plt.subplots(2, 1, figsize=(10, 10)) # Adjusted to match the original size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.axs[0].stackplot(tech_gaps, innovation_gaps, stacked=True, color=""lightblue"") # Add a vertical line to the bottom"
667,Customized Mimic,bar_83,"There is a reference image for you and I also have a set of data about **emotions and their frequencies**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Emotion labels
emotions = [
""Excitement"",
""Calmness"",
""Melancholy"",
""Confidence"",
""Apprehension"",
""Frustration"",
""Appreciation"",
""Comfort"",
""Happiness"",
""Criticism"",
]
# New approximate frequency values with changed dimensions
frequencies = [12.5, 11.0, 10.8, 10.5, 10.2, 10.0, 9.8, 9.5, 9.2, 9.0]
frequencies2 = [3.2, 3.8, 4.5, 5.3, 5.8, 6.0, 6.3, 7.2, 7.6, 8.0]
xlabel1 = "" Metric 1 ""
xlabel2 = "" Metric 2 ""
ylabel = ""Emotion Frequency (%)""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size.
",ori_500/bar_83.png,ori_500/bar_83.py,customized_500/bar_83.png,customized_500/bar_83.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data.  # Emotion labels emotions = [ ""Excitement"", ""Calmness"", ""Melancholy"", ""Confidence"", ""Apprehension"", ""Frustration"", ""Appreciation"", ""Comfort"", ""Happiness"", ""Criticism"", ] # New approximate frequency values with changed dimensions frequencies = [12.5, 11.0, 10.8, 10.5, 10.2, 10.0, 9.8, 9.5, 9.2, 9.0] frequencies2 = [3.2, 3.8, 4.5, 5.3, 5.8, 6.0, 6.3, 7.2, 7.6, 8.0] # Metric 1 value for emotion = [2.1%, 3.0%, 3.5%, 3.0%, 3.7%, 6.7%, 6.5%] # Metric 2 value for emotion = [6.0%, 6.0%, 6.0%, 5.0%, 5.0%, 5.0%, 5.0%] # Metric 3 value for emotion = [6.6%, 6.6%, "
605,Customized Mimic,bar_21,"There is a reference image for you and I also have a set of data about telemedicine and remote monitoring. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data for Telemedicine
telemedicine_data = {
""Benefits"": [15.8, 25.4, 30.5, 20.3, 8.0],
""Reliability"": [12.0, 22.5, 35.7, 21.8, 8.0],
""Security"": [10.5, 18.5, 38.0, 24.0, 9.0],
""Privacy"": [20.0, 28.5, 25.5, 18.0, 8.0],
}

# Data for Remote Monitoring
remote_monitoring_data = {
""Benefits"": [20.0, 24.0, 32.0, 14.0, 10.0],
""Reliability"": [10.0, 24.0, 40.0, 20.0, 6.0],
""Security"": [14.0, 18.0, 36.0, 26.0, 6.0],
""Privacy"": [10.0, 22.0, 34.0, 16.0, 18.0],
}

categories = [""Strong Disagree"", ""Disagree"", ""Neutral"", ""Agree"", ""Strong Agree""]
categories2 = [""Very Low"", ""Low"", ""Neutral"", ""High"", ""Very High""]

labels = [""Telemedicine"", ""Remote Monitoring""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(12.0, 6.0) to set the image size.
",ori_500/bar_21.png,ori_500/bar_21.py,customized_500/bar_21.png,customized_500/bar_21.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for Telemedicine telemedicine_data = { ""Benefits"": [15.8, 25.4, 30.5, 8.0], ""Reliability"": [29.6%, 29.6%, 18.5, 8.0], ""Security"": [40.7%, 40.7%, 27.8%, 2.3%], ""Agree"": [26.2%, 26.2%, 38.3%, 21.4%], ""Neutral"": [40.7%, 40.7%, 26.2%, 38.1%], ""Agree"": [40.7%, 40.7%, 26.2%, 38.1%], ""Strong Agree"": [24.1%, 29.6%, 20.8%, 16.7%], ""Neutral"": [40.7%, 40.7%, 26.2%, 27.8%, 2.3%], ""Strong Agree"": [40.7%, 40.7%, 26.2%, 38.1%, 21.4%], ""Strong Agree"": [40.7%, "
865,Customized Mimic,line_51,"There is a reference image for you and I also have a set of data about the growth and trends in technology over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Time in years
t = [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016,]

# Internet Usage
internet_usage = [5.8, 18.0, 65.0, 72.0, 73.5, 72.5, 69.0, 65.0, 61.0]
# Label for legend
label_internet_usage = ""Internet Usage""
# Title for the chart
title_internet_usage = ""Growth in Internet Usage""
# Label for y-axis
ylabel_value_usage = ""Percentage (%)""

# Mobile Device Adoption
mobile_device_adoption = [1.2, 10.0, 35.0, 65.0, 80.0, 92.0, 92.5, 92.8, 93.0]
# Label for legend
label_mobile_device_adoption = ""Mobile Device Adoption""
# Title for the chart
title_mobile_device_adoption = ""Rise of Mobile Device Adoption""
# Label for y-axis
ylabel_value_adoption = ""Percentage (%)""

# Software Development Jobs
software_development_jobs = [0.35, 0.55, 1.10,  2.02, 2.03, 2.00, 1.90, 1.80, 1.70]
# Label for legend
label_software_development_jobs = ""Software Development Jobs""
# Title for the chart
title_software_development_jobs = ""Increase in Software Development Jobs""
# Label for y-axis
ylabel_value_jobs = ""Number of Jobs (Millions)""

# Tech Investment Growth
tech_investment_growth = [50, 100, 210, 360, 520, 620, 670, 690, 720]
# Label for legend
label_tech_investment_growth = ""Tech Investment Growth""
# Title for the chart
title_tech_investment_growth = ""Growth of Tech Investments""
# Label for y-axis
ylabel_value_investment = ""Investment (Billion USD)""

# Label for x-axis for all charts
xlabel_value = ""Year""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 12.0) to set the image size.
",ori_500/line_51.png,ori_500/line_51.py,customized_500/line_51.png,customized_500/line_51.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for legend label investment growth (“Log Growth”)x = np.linspace(0, 12, 12) # Labels and Labels for legend label investment growth (%) codes for x-axis value value (“Value”)y = np.sin(x) # Sinusoidal Pattern (“Cos Wave”)label_investment_growth = “Software Development Jobs” # Label for x-axis value value investment growth (%) codes for log growth (%) codes for log log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%) codes for log growth (%)"
7,Direct Mimic,3d_8,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/3d_8.png,ori_500/3d_8.py,ori_500/3d_8.png,ori_500/3d_8.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the plot — age, income, debt, debt — income = np.array([15, 20, 30, 35, 40, 50, 70]) # Age, Income, Debt — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income — Income"
198,Direct Mimic,box_14,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/box_14.png,ori_500/box_14.py,ori_500/box_14.png,ori_500/box_14.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for demonstration purposesregion_accuracy = [0.88, 0.87, 0.81, 0.87, 0.83] # Labels for the regions classification accuracy obtained by the picture providedslice_mean_error = [0.33, 0.31, 0.31, 0.31, 0.31] # Labels for the slices mean error (ms) obtained by the picture provided# Labels for the slices of the image that are used to indicate the region classification accuracy for the picture providedlabels = [""DENSE (ref)"", ""Joint Multimodal\nFramework\n(ours)"", ""Cine""]titles = [""Region Classification Accuracy"", ""Slice Mean Error (ms)""]xlabel = ""Framework""ylabel = ""LMA Region Classification Accuracy""title_2 = ""Region Classification Accuracy""# ===================# Part 3: Plot Configuration and Rendering# ===================fig, axs = plt.subplots(1, 2, figsize=(10, 6)) # Adjusting figure size to match the original size to match the original size. Now, please give me the matplotlib code that reproduces the picture below."
409,Direct Mimic,multidiff_15,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/multidiff_15.png,ori_500/multidiff_15.py,ori_500/multidiff_15.png,ori_500/multidiff_15.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the heatmap and correlation coefficients for the picture providedcorrelation_data = np.array([[0.35, 0.20, 0.15, 0.22, 0.13], [0.24, -0.05, 0.14, 0.22, 0.17]]) # Unchanged Correct values for the picture providedcorrelation_label = ""Unchanged Correct""xlabel = ""Correlation""ylabel = ""Correlation""title = ""Python matplotlib code based on a given picture""# ===================# Part 3: Plot Configuration and Rendering# ===================# Set the figure size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.fig, ax = plt.subplots(1, 2, figsize=(10, 6)) # Adjusted to match the original size."
384,Direct Mimic,line_70,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(12.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_70.png,ori_500/line_70.py,ori_500/line_70.png,ori_500/line_70.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the picture provided and the threshold for the picture provideddata = np.random.rand(10, 8) * 0.2 + 0.3 # Width of the picture provided by the image creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator and highlight position of the picture provided by the picture creator"
273,Direct Mimic,heatmap_9,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 10.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/heatmap_9.png,ori_500/heatmap_9.py,ori_500/heatmap_9.png,ori_500/heatmap_9.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Define the data for the matplotlib code based on the picture provideddata = np.random.rand(10, 15) * 100 # 100 layers of data for matplotlib matplotlib code based on the picture providedlayers = [0, 2, 4, 6, 8, 10, 12, 14] # Layers of data for the matplotlib code based on the picture provideddata_1b = np.random.rand(10, 15) * 100 # 100 layers of data for the matplotlib code based on the picture provideddata_2b = np.random.rand(10, 15) * 100 # 100 layers of data for the matplotlib code based on the picture providedlayers_1b_min = np.random.rand(10, 15) * 100 # 100 layers of data for the matplotlib code based on the picture providedlayers_2b_min_min = np.random.rand(10, 15) * 100 # 100 layers of data for the matplotlib code based on the picture providedlayers_2b_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_"
917,Customized Mimic,multidiff_23,"There is a reference image for you and I also have a set of data about heart rate, step count, and weight changes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Seed for reproducibility

# Generate synthetic traffic data

# Heart rate counts at different times of day
morning_heart_rate = np.random.poisson(140, 500) # Morning heart rate
evening_heart_rate = np.random.poisson(120, 500) # Evening heart rate

# Step count data at different locations
home_steps = np.random.normal(4000, 800, 1000) # Steps at home
office_steps = np.random.normal(2000, 1000, 1000) # Steps at office

# Weight data over a diet period
days = np.linspace(0, 7, 1000) # Days in a week
weight_changes = np.sin(np.linspace(0, 2 * np.pi, 1000)) * 2 + 70 # Hypothetical weight changes

# Labels and titles for the plots
ax1labels = [""Morning Heart Rate"", ""Evening Heart Rate""]
titles = [""Heart Rate by Time of Day"", ""Step Count Distribution by Location"", ""Weight Changes Over a Diet Week""]
xlabels = [""Heart Rate (bpm)"", ""Number of Steps"", ""Days""]
ylabels = [""Frequency"", ""Frequency"", ""Weight (kg)""]
bins = np.linspace(40, 200, 31)


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 10.0) to set the image size.
",ori_500/multidiff_23.png,ori_500/multidiff_23.py,customized_500/multidiff_23.png,customized_500/multidiff_23.py,hard,"# Create a figure with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid with 4x4 grid, and a grid"
358,Direct Mimic,line_44,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_44.png,ori_500/line_44.py,ori_500/line_44.png,ori_500/line_44.py,easy,"# Importing Libraries matplotlib.pyplot as plt to create a figure with a specific size.
import matplotlib.gridspec as gridspec; gridspec.GridSpec(1, 2, width_ratios=[1, 2])
# Adding a gridspec layout to the figure.
figsize=(10, 6)
gridspec.GridSpec(1, 2, width_ratios=[1, 2])
# Adding a gridspec layout to the figure.
gridspec.GridSpec(1, 2, width_ratios=[1, 2])
# Adding a gridspec layout to the figure.
gridspec.GridSpec(1, 2, width_ratios=[1, 2])
# Adding a gridspec layout to the figure.
gridspec.GridSpec(1, 2, width_ratios=[1, 2])
# Adding a gridspec layout to the figure.
gridspec.GridSpec(1, 2, width_ratios=[1, 2])
# Adding a gridspec layout to the figure.
gridspec.GridSpec(1, 2, width_ratios=[1, 2])
# Adding a gridspec layout to the figure.
gridspec.GridSpec(1, 2, width_ratios=[1, 2])
# Adding a gridspec layout to the figure.
gridspec.GridSpec(1, 2, width_ratios=[1, 2])"
941,Customized Mimic,radar_2,"There is a reference image for you and I also have a set of data about urban mobility options such as Public Transit, Electric Vehicles, and Traffic Congestion. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Define the data for each model
values1 = [63.2, 55.4, 72.1, 78.9, 65.0, 59.7, 50.4] # PublicTransit
values2 = [75.6, 68.9, 82.4, 71.1, 74.3, 80.7, 64.5] # ElectricVehicles
values3 = [54.1, 78.5, 69.3, 64.7, 70.9, 69.2, 79.0] # TrafficCongestion
xlabels = [""BikeSharing"", ""CarPooling"", ""SmartParking"", ""ElectricBuses"", ""UrbanLogistics"", ""RideHailing"", ""LastMileDelivery""]
title = ""Urban Mobility Comparison""
labels = [""PublicTransit"", ""ElectricVehicles"", ""TrafficCongestion""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 7.0) to set the image size.
",ori_500/radar_2.png,ori_500/radar_2.py,customized_500/radar_2.png,customized_500/radar_2.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for each model values and accurately represents my data. # Define the data for each model values2 = [63.2, 55.4, 72.1, 78.9, 65.0, 59.7, 50.4] # Public Transit values2 = [75.6, 68.9, 82.4, 71.1, 74.1, 3, 80.7, 64.5] # Electric Vehicles values3 = [54.1, 78.5, 69.3, 64.7, 70.9, 69.2, 70.0] # Traffic Congestion values3 = [54.1, 78.5, 69.3, 64.7, 70.9, 69.2, 70.0] # TrafficLogistics values4 = [54.1, 78.5, 69.3, 64.7, 70.9, 69.2, 70.0] # TrafficUtilization values5 = [59.7, 66.4, 66.4, 66.4, 66.4, 66.4] # RideHailing"",""LastMileDelivery""] # Title = ""Urban Mobility"
548,Customized Mimic,HR_4,"There is a reference image for you and I also have a set of data about business revenue and profit margins. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The business data is as follows:
# k,h,a
k = 0.4, h = 10, a = 5
# Profit margins
profit_margins = np.linspace(5, 20, 400)
# Revenue
revenue = a * (profit_margins - k) ** 2 + h
# Points Profit
points_profit = np.linspace(7, 18, 20)
# Points Revenue
points_revenue = a * (points_profit - k) ** 2 + h - 1.5
# Labels
label_1 = ""Revenue vs. Profit Margin"", label_2 = ""± 3-σ of Prediction"", label_3 = ""Data Points""
# # Varied sizes of ellipses
ellipse_sizes = np.linspace(15, 15, len(points_profit))
# Label of x axis
xlabel_value = ""Revenue (in millions)""
# Label of y axis
ylabel_value = ""Profit Margin (%)""
# Title
title = ""Revenue vs. Profit Margin with Uncertainty Ellipses""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/HR_4.png,ori_500/HR_4.py,customized_500/HR_4.png,customized_500/HR_4.py,hard,"# Create a 3-D plot using the provided function and add labels and title.
def plot_metric(x, y, title):
    x = np.linspace(0, 25, 20)
    y = np.linspace(0, 3, 20)
    plt.figure(figsize=(10, 8))
    plt.plot(x, y, color=""blue"", linestyle=""--"", label=title)
    plt.scatter(x, y, c=""blue"", label=title)
    plt.scatter(x, y, c=""blue"", label=title)
    plt.scatter(x, y, c=""blue"", label=title)
    plt.legend()
    plt.xlabel(""x(m)"")"
220,Direct Mimic,errorbar_1,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/errorbar_1.png,ori_500/errorbar_1.py,ori_500/errorbar_1.png,ori_500/errorbar_1.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Generate random data for illustration purposes — which is why I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Note that it is necessary to use figsize=(6, 0, 4.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Define the log probability for each picture — which is the same as the picture I provide. Here, I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Here that it is necessary to use figsize=(6, 0, 4.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.def log_probability_1(x, y): # Generate log probabilities for each picture based on the original size. Here, I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Here that it is necessary to use figsize=(6, 0, 4.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.def log_probability_2(x, y): # Generate log probabilities for each picture based on the original size. Here,"
370,Direct Mimic,line_56,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(9.0, 3.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_56.png,ori_500/line_56.py,ori_500/line_56.png,ori_500/line_56.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting according to the picture provided and the LAION (5k) and LAION (5k) according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding LAION (5k) according to the picture provided. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding LAION (5k) according to the picture provided. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding LAION (5k) according to the picture provided. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding LAION (5k) according to the picture provided. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding LAION (5k) according to the picture provided. Data for plotting according to the picture provided and the corresponding source code available. Data for plotting according to the picture provided and the corresponding LAION (5k) according to the picture provided. Data
29,Direct Mimic,CB_15,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/CB_15.png,ori_500/CB_15.py,ori_500/CB_15.png,ori_500/CB_15.py,medium,# 44.4% German 44.4% English 11.1% English 11.1% German 44.4% German 44.4% German 44.4% English 44.4% German 44.4% English 44.4% German 44.4% English 44.4% German 44.4% English 44.4% German 44.4% English 44.4% German 44.4% German 44.4% English 44.4% German 44.4% English 44.4% German 44.4% English 44.4% German 44.4% English 44.4% German
51,Direct Mimic,HR_7,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/HR_7.png,ori_500/HR_7.py,ori_500/HR_7.png,ori_500/HR_7.py,hard,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the plot with the left and center left and center center right and right center right; and center center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and right center right and
652,Customized Mimic,bar_68,"There is a reference image for you and I also have a set of data about education statistics across different school levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Example education data
categories = [
""Student Enrollment"",
""Graduation Rate"",
""Average Test Scores"",
""Teacher Satisfaction"",
]
layer_data = {
""Primary School"": np.array([300, 90, 75, 85]),
""Secondary School"": np.array([250, 85, 80, 80]),
""High School"": np.array([200, 80, 78, 75]),
""University"": np.array([150, 70, 85, 70]),
}
title = ""Stacked Bar Chart of Education Data""
xlabel = ""Categories""
ylabel = ""Values""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_68.png,ori_500/bar_68.py,customized_500/bar_68.png,customized_500/bar_68.py,easy,# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. Data for the categories and values. Data for the road condition. Data for the category. Data for the category. Data for the road condition. Data for the category. Data for the road condition. Data for the category. Data for the road condition. Data for the category. Data for the road condition. Data for the category. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition. Data for the road condition.
526,Customized Mimic,CB_12,"There is a reference image for you and I also have a set of data about renewable energy outputs, specifically solar and wind energy. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data for demonstration purposes
solar_energy_data = np.random.beta(a=3, b=9, size=1000) * 100 # Solar energy output in kWh
wind_energy_data = np.random.beta(a=5, b=5, size=1000) * 100 # Wind energy output in kWh

# Compute KDE for both datasets
kde_solar = gaussian_kde(solar_energy_data)
kde_wind = gaussian_kde(wind_energy_data)

# Create an array of values for plotting KDE
x_eval = np.linspace(
min(np.concatenate([solar_energy_data, wind_energy_data])),
max(np.concatenate([solar_energy_data, wind_energy_data])),
1000,
)
labels = [""Solar Energy"", ""Wind Energy"", ""Solar KDE"", ""Wind KDE""]
p_text = ""T-test p-value = 0.0000""
x_label = ""Energy Output (kWh)""
y_label = ""Density""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/CB_12.png,ori_500/CB_12.py,customized_500/CB_12.png,customized_500/CB_12.py,medium,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as pltimport matplotlib.patches as mpatches# ===================# Part 2: Data Preparation# ===================# Data for plotting and generating Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.  # Sample data for demonstration purposes solar_energy_data = np.random.beta(a=3, b=9, size=1000) * 100 # Solar energy output in kWh wind_energy_data = np.random.beta(a=5, b=5, size=1000) * 100 # Wind energy output in kWh # Compute KDE for both datasets rude_solar = gaussian_kde(solar_energy_data) # KDE_wind = gaussian_kde(wind_energy_data) # Create an array of values for plotting KDE"
907,Customized Mimic,multidiff_13,"There is a reference image for you and I also have a set of data about financial metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
heatmap_top_data = np.random.rand(12, 12) * 2- 0.9
heatmap_bottom_data = np.random.rand(12, 12) * 2 - 0.9

# Compute mean values for bar data representation
bar_data_top = heatmap_top_data.mean(axis=0)
bar_data_bottom = heatmap_bottom_data.mean(axis=0)

# Attributes for y-axis (financial metrics)
attributes = [
""Revenue Growth"",
""Profit Margin"",
""Debt to Equity"",
""Return on Equity"",
""Price to Earnings"",
""Dividend Yield"",
""Market Cap"",
""Cash Flow"",
""Earnings Growth"",
""Book Value"",
""Operating Margin"",
""Net Income"",
]

# Titles and labels for the plots
heatmap_xlabel = ""Financial Metric""
bar_xlabel = ""$I_{\infty}$(Risk, Return)""

# Normalize the bar data to match heatmap's vmin and vmax
norm = Normalize(vmin=-0.5, vmax=1.0)


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/multidiff_13.png,ori_500/multidiff_13.py,customized_500/multidiff_13.png,customized_500/multidiff_13.py,hard,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as pltimport matplotlib.gridspec as gridspec# ===================# Part 2: Data Preparation# ===================# Data for the heatmap. Data that corresponds to the style of the reference image and accurately represents my data. Data that accurately mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.data = np.array([[-0.5, 0.0, 0.5, 1.0, 1.5], [-0.5, 0.0, 0.5, 0.5, 1.0, 1.5]]) # Adjusting figure size to match the original image's dimensions and widths. Data is encoded as a'sensitive attribute'. Data is encoded as a 'normalize' attribute. Data is encoded as a 'non-normalize' attribute. Data is encoded as a 'non-normalize' attribute. Data is encoded as a 'non-normalize' attribute. Data is encoded as a 'non-normalize' attribute. Data is encoded as a 'non-normalize' attribute. Data is encoded as a 'non-normalize' attribute. Data is encoded as a 'non-normalize' attribute. Data is encoded as a 'non-normalize' attribute. Data is encoded as"
477,Direct Mimic,scatter_18,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/scatter_18.png,ori_500/scatter_18.py,ori_500/scatter_18.png,ori_500/scatter_18.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for demonstration purposesdata = np.random.rand(100, 20) * 100 + 99.9 # Adjusted to match the original size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Generating random data for demonstration purposes and show the plot. Data for demonstration purposes is generated using matplotlib.colors.from_palette(np.linspace(2, 17, 10))data_1 = data[data.day_1 == 1] # Adjusted to match the day 1 and day 2. Data for demonstration purposes. Data for demonstration purposes is generated using matplotlib.colors.from_palette(np.linspace(2, 17, 10))data_2 = data[data.day_2 == 2] # Adjusted to match the day 2. Data for demonstration purposes. Data for demonstration purposes. Show the plot. Store the matplotlib code for demonstration purposes.# Generating random data for demonstration purposes. Note that it is necessary to use figsize=(6.0, 6.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Setting the matplotlib code to match the original size. Now, please give me the matplotlib code that reproduces the picture below.plt.figure(fig"
923,Customized Mimic,pie_4,"There is a reference image for you and I also have a set of data about major crop production percentages. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


labels = [""Wheat 35%"", ""Corn 25%"", ""Rice 20%"", ""Soybeans 20%""]
sizes = [35, 25, 20, 20]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(5.0, 5.0) to set the image size.
",ori_500/pie_4.png,ori_500/pie_4.py,customized_500/pie_4.png,customized_500/pie_4.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that accurately mirrors the style of the reference image and accurately represents my data. Data for Italy and Germany are exported to the UK and Italy 28%. Data for France 18%. Data for UK 42%. Data for Italy 28%. Data for France 18%. Data for France 20%. Data for Italy 28%. Data for Germany 12%. Data for Germany 12%. Data for France 18%. Data for Italy 28%. Data for France 20%. Data for Italy 28%. Data for Germany 12%. Data for France 20%. Data for Italy 28%. Data for France 20%. Data for Germany 12%. Data for France 20%. Data for Italy 28%. Data for Italy 28%. Data for Germany 12%.
654,Customized Mimic,bar_70,"There is a reference image for you and I also have a set of data about surveyor accuracy scores. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Sample data
annotators = [""Surveyor 1"", ""Surveyor 2"", ""Surveyor 3"", ""Surveyor 4"", ""Surveyor 5"", ""Surveyor 6""]
scores = {
""Surveyor 1"": [20, 22, 18, 23, 22],
""Surveyor 2"": [18, 20, 19, 24, 24],
""Surveyor 3"": [17, 21, 20, 22, 25],
""Surveyor 4"": [19, 18, 21, 23, 24],
""Surveyor 5"": [21, 19, 22, 20, 23],
""Surveyor 6"": [20, 21, 19, 22, 23],
}

title = ""Surveyor Data Collection Accuracy""
xlabel = ""Surveyor""
ylabel = ""Accuracy Scores""
score_labels = [f""Round {i+1}"" for i in range(5)]
legendtitle = ""Survey Rounds""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 5.0) to set the image size.
",ori_500/bar_70.png,ori_500/bar_70.py,customized_500/bar_70.png,customized_500/bar_70.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================scores = [10, 12, 8, 10, 6, 10] # Sample data annotators = [""Surveyor 1"", ""Surveyor 2"", ""Surveyor 3"", ""Surveyor 4"", ""Survey Rounds""]scores2 = [10, 12, 8, 12, 6, 10] # Sample data annotators = [""Surveyor 1"", ""Surveyor 2"", ""Surveyor 4"", ""Survey Rounds""]scores3 = [10, 12, 8, 12, 6, 10] # Sample data annotators = [""Surveyor 3"", ""Surveyor 4"", ""Survey Rounds""]scores4 = [10, 12, 8, 12, 6, 10] # Sample data annotators = [""Survey Rounds"", ""Score 4"", ""Score 5""]# Reference image for you and I also have a set of data about surveyor accuracy scores. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable"
86,Direct Mimic,bar_2,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 3.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_2.png,ori_500/bar_2.py,ori_500/bar_2.png,ori_500/bar_2.py,medium,"# Plot the histogram of the sample size for the 'time' and 'pace' experiments'
fig, ax = plt.subplots(figsize=(6, 4))
ax.hist(time, bins=50, color=""green"", edgecolor=""black"", linewidth=1.2, label=labels[0])
ax.hist(pace, bins=50, color=""red"", edgecolor=""black"", linewidth=1.2, label=labels[1])
ax.hist(bound, bins=50, color=""purple"", edgecolor=""black"", linewidth=1.2, label=labels[2])
ax.hist(pronk, bins=50, color=""orange"", edgecolor=""black"", linewidth=1.2, label=labels[3])"
469,Direct Mimic,scatter_10,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/scatter_10.png,ori_500/scatter_10.py,ori_500/scatter_10.png,ori_500/scatter_10.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the plot (replace with actual data)gpu_hours = np.array([77, 78, 79, 80, 81, 82, 83]) # Pre-training GPU Hours for the picture providedaccuracy_ibot = np.array([75.3, 77.5, 78.0, 79.0, 78.5, 81.0]) # iBOT curve for the picture providedd2v2_refined = np.array([83.4, 83.0, 83.0, 83.4, 84.5, 84.5]) # MAE curve for the picture providedd2v2_refined_mae = np.array([77.0, 77.5, 75.3, 79.0, 78.5, 84.5]) # iBOT curve for the picture provided# Pre-training GPU Hours for accuracy in the picture providedpre_training_gpu_hours = np.array([77.0, 77.5, 75.3, 79.0, 78.5, 83.4]) # iBOT curve for the picture provided# Correcting the error values for the image to match the original size. Now, please give me the"
824,Customized Mimic,line_10,"There is a reference image for you and I also have a set of data about investment performance gains. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The investment performance data is as follows:
# Investment Amount
investment_amount = [""0"", ""1000"", ""5000"", ""10000"", ""20000"", ""50000"", ""100000"", ""200000""]
# Performance Gain for different types of investments
stock_investment = [1, 2.5, 4, 6, 5, 3.5, 2.5, 1]
bond_investment = [4, 3.8, 3.5, 3, 2.5, 1.8, 1, 0.5]
real_estate_investment = [0, 1.5, 3, 2.5, 4, 5.5, 6, 5.8]
# Label of x axis and y axis
xlabel = ""Investment Amount ($)""
ylabel = ""Performance Gain (%)""
# Labels
stock_investment_label = ""Stock Investment""
bond_investment_label = ""Bond Investment""
real_estate_investment_label = ""Real Estate Investment""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/line_10.png,ori_500/line_10.py,customized_500/line_10.png,customized_500/line_10.py,easy,<<img_src=content_btn img_alt=Content> <img_src=organization_btn img_alt=Organization> <img_src=language_btn img_alt=Language>>
583,Customized Mimic,area_4,"There is a reference image for you and I also have a set of data about the impact of data augmentation on model performance. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data for the plot with new trends is as follows:
# Augmentation Levels
n_aug = [""0"", ""0.125"", ""0.25"", ""0.5"", ""1"", ""2"", ""4"", ""8""]
# Performance Improvement for Data Quality
content = [8, 6, 4, 3, 2, 1, 0.5, 0.2]
# Performance Improvement for Algorithm Efficiency
organization = [7, 5, 3, 2.5, 2, 1.5, 1, 0.5]
# Performance Improvement for Model Robustness
language = [6, 4, 2, 1.5, 1, 0.8, 0.4, 0.2]
# Label of x axis
xlabel_text = ""Augmentation Levels (n)""
# Label of y axis
ylabel_text = ""Performance Improvement (%)""
# Title
title_text = ""Impact of Data Augmentation on Model Performance""
# Labels
content_label = ""Data Quality""
organization_label = ""Algorithm Efficiency""
language_label = ""Model Robustness""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 4.0) to set the image size.
",ori_500/area_4.png,ori_500/area_4.py,customized_500/area_4.png,customized_500/area_4.py,easy,<<Content> <Organization> <Language>>
200,Direct Mimic,box_16,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(5.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/box_16.png,ori_500/box_16.py,ori_500/box_16.png,ori_500/box_16.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the bar chart — the data for the picture — and the labels — separate M and C — separate M embeddings — 4 tokensizer — No latent space C — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer — 4 x 4 tokenizer
679,Customized Mimic,bar_95,"There is a reference image for you and I also have a set of data about AI model performance improvements across different sectors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
models = [""XCalibur AI"", ""OmegaNet 2.0"", ""NeuroStream"", ""QuantumLeap AI"", ""Sentient Core""]
improvements = {""Healthcare"": [4.5], ""Finance"": [1.2], ""Education"": [3.4], ""Retail"": [2.8], ""Manufacturing"": [0.7]}
improvements2 = {""Healthcare"": [2.1], ""Finance"": [-0.5], ""Education"": [4.1], ""Retail"": [1.9], ""Manufacturing"": [-1.3]}
title = ""AI Model Performance Improvement by Sector""
legendtitle = ""Sector""
ylabel = ""Improvement [%]""
xlabel = ""AI Model""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_95.png,ori_500/bar_95.py,customized_500/bar_95.png,customized_500/bar_95.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data models (replace with actual data) and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Data models = [""XCalibur AI"", ""OmegaNet 2.0"", ""NeuroStream"", ""QuantumLeap AI"", ""Sentient Core""] improvements = [""Healthcare"", [4.5], ""Finance"", [2.8], ""Manufacturing""] * 10 + 4 # Model Performance Improvement by Language# Model Performance Improvement by Languagemodel_performance_improvement_by_language = [3.5, 2.3, 4.4, 1.3, 0.7] # Improvement by Languageimprovement_by_sector = [-1.3, -0.3, -0.3, 3.4, 3.3] # Improvement by Sector relative to the reference image and accurately represents my data. NATIONALLY, the data models are exported to your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 6.0) to set the image size.model_performance_improvement_by_language = [4.0, 4.4, 3.4, 3.3, 4.4] # Model Performance Improvement by Sector relative to the reference image and accurately represents my data. NATIONALLY, the data models"
842,Customized Mimic,line_28,"There is a reference image for you and I also have a set of data about fuel efficiency across different car models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
x = [0, 25, 50, 75, 100, 125, 150, 175, 200]
model_a_y = [24, 26, 28, 30, 32, 31, 29, 28, 27]
model_b_y = [22, 24, 26, 28, 29, 30, 31, 32, 33]
baseline_fuel_efficiency = 24

# Axes Limits and Labels
xlabel_value = ""Number of Test Miles""

ylabel_value = ""Average Fuel Efficiency (MPG)""

# Labels
label_1 = ""Model A""
label_2 = ""Model B""
label_3 = ""Baseline Model""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size.
",ori_500/line_28.png,ori_500/line_28.py,customized_500/line_28.png,customized_500/line_28.py,easy,<<Number of exemplars in class 'Run'> <img_src=py_pilote_100_125_150_175_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_200_150_
736,Customized Mimic,errorbar_17,"There is a reference image for you and I also have a set of data about internet penetration rates and mobile device ownership ratios across different countries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


categories = [""Canada"", ""France"", ""China"", ""Australia"", ""South Korea""]

values = [0.75, 0.68, 0.55, 0.45, 0.60]
errors = [0.04, 0.03, 0.04, 0.05, 0.03]

categories2 = [""Canada"", ""France"", ""China"", ""Australia"", ""South Korea""]
values2 = [18, 17, 30, 22, 14]
errors2 = [1.2, 0.6, 1.8, 1.4, 0.7]

titles = [""Internet Penetration Rate"", ""Mobile Device Ownership Ratio""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.
",ori_500/errorbar_17.png,ori_500/errorbar_17.py,customized_500/errorbar_17.png,customized_500/errorbar_17.py,easy,<>
293,Direct Mimic,heatmap_29,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(5.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/heatmap_29.png,ori_500/heatmap_29.py,ori_500/heatmap_29.png,ori_500/heatmap_29.py,medium,<>
171,Direct Mimic,bar_87,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_87.png,ori_500/bar_87.py,ori_500/bar_87.png,ori_500/bar_87.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Generate some data for the picture to match the original size. Note that it is necessary to use figsize=(10, 8.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Create a figure with the specified size. For example, you can use -10, 8, 10, 19.7% of the original size. Also, you can use -5, -6, -7, -8, 9.7% of the original size. Data for the picture is not available. Customize the picture to match the original size. Data for the picture is not available. Customize the picture to match the original size. Data for the picture is not available. Customize the picture to match the original size. Data for the picture is not available. Customize the picture to match the original size. Data for the picture is not available. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Customize the picture to match the original size. Custom"
839,Customized Mimic,line_25,"There is a reference image for you and I also have a set of data about vehicle performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Dummy data for the purpose of plotting. In a real scenario, you would use your actual data.
number_of_vehicles = np.array([10, 20, 40, 80])

# Average Fuel Efficiency (MPG)
baseline_efficiency = np.array([20, 21, 22, 22.5])
method1_efficiency = np.array([18, 19, 20, 21])
method2_efficiency = np.array([15, 16.5, 17, 18])

# Error for Fuel Efficiency
error_efficiency = np.array([0.5, 0.5, 0.5, 0.5])

# Average Travel Time (minutes)
baseline_time = np.array([35, 40, 45, 50])
method1_time = np.array([38, 42, 47, 52])
method2_time = np.array([40, 45, 50, 55])

# Error for Travel Time
error_time = np.array([1, 1, 1, 1])

# Axes Limits and Labels
ylabel_value_1 = ""Average Fuel Efficiency (MPG)""
ylabel_value_2 = ""Average Travel Time (minutes)""

# Labels
label_Baseline = ""Baseline""
label_Method1 = ""Alternative Method 1""
label_Method2 = ""Alternative Method 2""

# Texts
text_1 = ""Number of Vehicles""
text_2 = ""Comparison Metrics""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/line_25.png,ori_500/line_25.py,customized_500/line_25.png,customized_500/line_25.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================baseline_data = np.array([3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 47, 52]) # Baseline data for the purpose of plotting. In a real scenario, you would use your actual data. number_of_vehicles = np.array([10, 20, 40, 22, 5]) # Average Fuel Efficiency (MPG) based on your actual data. acuerdo with the reference image and accurately represents my data. Here, you must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8, 6.0) to set the image size.# Error for Fuel Efficiency error_efficiency = np.array([15, 16.5, 17, 18]) # Error for Fuel Efficiency error_efficiency = np.array([0.5, 0.5, 0.5, 0.5]) # Average Travel Time (minutes) based on the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8, 0, 6.0) to set the image size.# Error"
375,Direct Mimic,line_61,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_61.png,ori_500/line_61.py,ori_500/line_61.png,ori_500/line_61.py,easy,"# Plot performance and efficiency analysis
fig, ax = plt.subplots(figsize=(8, 6))
ax.plot(x, y, linestyle=""--"", label=""Performance"")
ax.plot(x, efficiency, linestyle=""--"", label=""Efficiency"")
ax.fill_between(x, y, color=""skyblue"", alpha=0.5)
ax.fill_between(x, efficiency, efficiency, color=""skyblue"", alpha=0.5)
ax.set_title(""Performance and Efficiency Analysis"", fontsize=16)
ax.set_xlabel(""Weeks"")
ax.set_ylabel(""Values"")
ax.legend()"
860,Customized Mimic,line_46,"There is a reference image for you and I also have a set of data about transportation usage over a 24-hour period. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation usage data is as follows:
# Time in hours
times = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0]
# Car usage percentage
car_usage = [0, 10, 30, 20, 40, 60, 50, 70, 90, 80, 100, 70, 60, 50, 70, 80, 90, 100, 80, 70, 60, 50, 30, 20, 10]
# Bike usage percentage
bike_usage = [20, 30, 40, 50, 60, 70, 60, 50, 40, 30, 20, 10, 30, 40, 50, 60, 70, 80, 60, 50, 40, 30, 20, 10, 30]
# Label of x axis
xlabel_value = ""Time (Hours)""
# Label of y axis
ylabel_value = ""Usage Level (%)""
# Titles
title1 = ""Daytime Transportation Monitoring""
title2 = ""Nighttime Transportation Monitoring""
# Labels
line_label1 = ""Car Usage""
line_label2 = ""Bike Usage""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 10.0) to set the image size.
",ori_500/line_46.png,ori_500/line_46.py,customized_500/line_46.png,customized_500/line_46.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation usage data is as follows: # Time in hours times [0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]standard_activity = np.array([0, 5, 10, 15, 20, 25, 26]) # Daytime Activity Monitoringinnovative_activity = np.array([1.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 10.0]) # Standard Activity# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows: #"
994,Customized Mimic,violin_5,"There is a reference image for you and I also have a set of data about different performance metrics across five quarters. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data to mimic the picture provided
data = np.random.beta(a=[5, 20, 35, 25, 30], b=[20, 35, 45, 40, 50], size=(10, 5))
data_memory = np.random.beta(
a=[10, 30, 50, 40, 55], b=[25, 55, 35, 50, 60], size=(40, 5)
)
legend_labels = [""Growth"", ""Decline""]
# The scaling factor is used to ensure the violins do not overlap
scaling_factor = 1
violin_width = 0.5

# Adjust the offsets for 5 groups instead of 3
offsets = np.linspace(-3, 3, 5)


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.
",ori_500/violin_5.png,ori_500/violin_5.py,customized_500/violin_5.png,customized_500/violin_5.py,medium,"# Adding the teacher-style and standardize options to the plot
teach_style = [""Teacher-Style"", ""Standardize""]
standardize_options = [""0.005"", ""0.20"", ""0.35"", ""0.4""]

# Adding the violins to the plot to mimic the style of the reference image and accurately represents my data
violin_width = 0.5 # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5) # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5) # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5) # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5) # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5) # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5) # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5) # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5) # Adjust the offsets for 5 groups instead of 3 offsets = np.linspace(3, 3, 5)"
670,Customized Mimic,bar_86,"There is a reference image for you and I also have a set of data about customer service interactions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
categories = [
""introduction"",
""assistance"",
""complaint"",
""forgiveness"",
""convincing"",
""gratitude"",
""farewell"",
]
synthetic_data = [
-5,
-12,
-8,
-4,
-6,
-3,
-2,
] # Negative values for synthetic data
human_data = [10, 15, 9, 4, 12, 13, 8]
synthetic_data2 = [-7, -11, -9, -3, -5, -2, -1] # Negative values for synthetic data
human_data2 = [11, 18, 12, 6, 14, 11, 9]
labels = [""Generated Text"", ""Human Text""]
titles = [""Baseline"", ""Enhanced""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_86.png,ori_500/bar_86.py,customized_500/bar_86.png,customized_500/bar_86.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data categories = [""leave-taking"", ""thanking"", ""persuasion"", "" apology"", ""criticism"", ""request"", ""greeting""]# Negative values for synthetic_data human_data = [10, 15, 9, 4, -2, 13, 8] # Negative values for synthetic_data human_data2 = [-7, -11, -9, -3, -5, -2, -1] # Negative values for synthetic data human_data2 = [11, 18, 12, 6, 14, 11, 9] labels = [""Generated Text"", ""Human Text""] # Labeling and formatting for the reference image and accurately represents my data. # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Data categories = [""Introduction"", ""assistance"", ""complaint"", ""forgiveness"", ""convincing"", ""gratitude"", ""farewell"", ""satisfaction"", ""positiveness""] # Negative values for synthetic_data human_data = [10, 15, 9, 4, -2, 12, 8] # Negative values for synthetic data human_data = [-7, -11, -9, -3, -5, -2, -1] # Negative values for synthetic data human_data2 = ["
922,Customized Mimic,pie_3,"There is a reference image for you and I also have a set of data about market share percentages for different tech companies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The market share data is as follows:
# Labels for the segments
labels = [""Apple"", ""Samsung"", ""Google"", ""Microsoft""]
# Market share percentages
sizes = [22, 30, 18, 30]

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(5.0, 5.0) to set the image size.
",ori_500/pie_3.png,ori_500/pie_3.py,customized_500/pie_3.png,customized_500/pie_3.py,easy,"# Plot the reference image and generate a chart that exactly mirrors the style of the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
labels = [""David"", ""John"", ""Marry"", ""Peter""]
sizes = [22, 30, 18, 30]
colors = [""#ff9999"", ""#66b3ff"", ""#99ff99"", ""#66b3ff"", ""#99ff99""]
explode = (0, 0, 0, 0)
# Plot the data and set the legend to """"
plt.pie(sizes, explode=explode, labels=labels, autopct=""%1.1f%%"", shadow=False, startangle=140)"
146,Direct Mimic,bar_62,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_62.png,ori_500/bar_62.py,ori_500/bar_62.png,ori_500/bar_62.py,medium,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the matplotlib code to reproduce the picture based on the picture provided. Data for the picture is used to generate the pyplot code based on the picture I provide. Data for the image is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the image is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture I provide. Data for the picture is used to generate the matplotlib code based on the picture. Data for the picture is used to generate the matplotlib code based on the picture. Data for the picture is used to generate the matplotlib
53,Direct Mimic,HR_9,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/HR_9.png,ori_500/HR_9.py,ori_500/HR_9.png,ori_500/HR_9.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for illustration purposesdata = np.random.normal(-10, 4, 1000) + np.random.normal(-5, 3, 1000) + np.random.normal(-10, 2, 1000) + np.random.normal(-10, 3, 1000) + np.random.normal(-10, 2, 1000) + np.random.normal(-10, 2, 1000) + np.random.normal(-10, 2, 1000) + np.random.normal(-10, 2, 1000)# Axes Limits and Labelsxlabel_value = ""story""ylabel_value_1 = ""Perplexity Reduction""ylabel_value_2 = ""rule""title_1 = ""Model = Vicuna""title_2 = ""Model = Alpaca""# ===================# Part 3: Plot Configuration and Rendering# ===================# Create a figure with two subplots (1, 2) and one for each model and plot the boxplots according to the model's description."" Giving the figure the correct size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.fig, axs = plt."
310,Direct Mimic,hist_16,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(5.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/hist_16.png,ori_500/hist_16.py,ori_500/hist_16.png,ori_500/hist_16.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the histogram based on the picture provided and the histogram for the baguette and youtiao codes. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes. Distance to threshold. Data for the baguette and youtiao codes. Distance to threshold. Data for the youtiao codes.
288,Direct Mimic,heatmap_24,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/heatmap_24.png,ori_500/heatmap_24.py,ori_500/heatmap_24.png,ori_500/heatmap_24.py,medium,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)import matplotlib.gridspec as gridspecfrom matplotlib.gridspec import GridSpec# ===================# Part 2: Data Preparation# ===================# Sample data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data for the picture. Data
14,Direct Mimic,3d_15,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/3d_15.png,ori_500/3d_15.py,ori_500/3d_15.png,ori_500/3d_15.py,hard,<<img_src=cs_10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
372,Direct Mimic,line_58,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_58.png,ori_500/line_58.py,ori_500/line_58.png,ori_500/line_58.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for demonstration purposestraining_iterations = np.arange(0, 201, 20) # 20 training iterations to get our model into shape # Base model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on our picture # Our model based on"
569,Customized Mimic,HR_25,"There is a reference image for you and I also have a set of data about the cosine function's absolute value influenced by the sum of x and y coordinates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
interp = ""nearest""
# Linear x array for cell centers:
x = np.linspace(0, 5, 9)

# Highly nonlinear x array:
x2 = np.sin(x * np.pi / 5)

y = np.linspace(0, 5, 9)

z = np.abs(np.cos(x[np.newaxis, :] + y[:, np.newaxis]))
suptitle=""Transformed NonUniformImage""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/HR_25.png,ori_500/HR_25.py,customized_500/HR_25.png,customized_500/HR_25.py,hard,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as pltimport matplotlib.colors as mcolors as colorstools# ===================# Part 2: Data Preparation# ===================# Define the data for the grid and grid layout to mimic the grid layout and grid layout to generate a chart that exactly mirrors the style of the reference image and accurately represents my data. Data for the grid layout is normally distributed in 4x4 grids, but it is not possible to create a grid layout that mirrors the style of the reference image and accurately represents my data. Data for the grid layout is normally distributed in 4x4 grids, but it is necessary to use figsize=(8.0, 6.0) to set the image size. Continuing to use the matplotlib code, I will use the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8.0, 6.0) to set the image size. Continuing to use figsize=(8.0, 6.0) to set the image size. Continuing to use figsize=(8.0, 6.0) to set the image size. Continuing to use figsize=(8.0, 6.0) to set the image size. Continuing to use figsize=(8.0, 6.0) to set the image size. Continuing to use figsize=(8.0, 6.0) to set the"
737,Customized Mimic,errorbar_18,"There is a reference image for you and I also have a set of data about environmental factors affecting transportation safety. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Regions for environmental data
regions = [""North"", ""East"", ""West"", ""South"", ""Central""]

# Annual Traffic Accident Rates (hypothetical data)
accident_rates = [2300, 1500, 2800, 1900, 1700] # Approximate values
accident_rates_errors = [200, 180, 250, 210, 190] # Error estimates

# Public Transport Usage Rate (% of population using public transport)
transport_usage = [45, 30, 55, 40, 35] # Approximate percentages
transport_usage_errors = [5, 4, 6, 5, 4] # Error estimates

# Bicycle Lane Coverage (% of total road length)
bicycle_lane_coverage = [12, 20, 15, 10, 18] # Approximate percentages
bicycle_lane_coverage_errors = [2, 3, 2, 1, 2] # Error estimates

titles =[""Annual Traffic Accident Rates"",""Public Transport Usage Rate"",""Bicycle Lane Coverage""]
xlabels=[""Number of Accidents"",""% of Population"",""% of Road Length""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 9.0) to set the image size.
",ori_500/errorbar_18.png,ori_500/errorbar_18.py,customized_500/errorbar_18.png,customized_500/errorbar_18.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the charts (optional) and generate a reference image and accurately represents my data. 
# Regions for environmental data represent the style of the reference image and accurately represents my data. 
# Regional and environmental data represent the style of the reference image and accurately represents my data. 
# Regional and environmental data represent the style of the reference image and accurately represents my data. 
# Regional and environmental data represent the style of the reference image and accurately represents my data. 
# Regional and environmental data represent the style of the reference image and accurately represents my data. 
# Regional and environmental data represent the style of the reference image and accurately represents my data. 
# Annual Carbon Dioxide Emissions (% of total energy consumption) represents 1200, 1800, 250, 1900, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000) represent 1200, 1800, 250, 210, 1700, 1800, 1900, 1900, 2300, 1800, 2500, 2500, 2100, 1900, 2500, 2600, 3"
987,Customized Mimic,tree_3,"There is a reference image for you and I also have a set of data about energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
sizes = [27.0, 24.2, 16.3, 11.4, 10.2, 8.9]
labels = [
""Oil\n27.0%"",
""Coal\n24.2%"",
""Natural Gas\n16.3%"",
""Hydropower\n11.4%"",
""Nuclear\n10.2%"",
""Renewables\n8.9%"",
]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(12.0, 8.0) to set the image size.
",ori_500/tree_3.png,ori_500/tree_3.py,customized_500/tree_3.png,customized_500/tree_3.py,easy,<<img_src=adidas_13.42% img_alt=Adidas> <img_src=under_armour_8.54% img_alt=Under Armour> <img_src=new_balance_6.26% img_alt=New Balance> <img_src=reebok_10.91% img_alt=Reebok> <img_src=puma_14.21% img_alt=Puma>>
207,Direct Mimic,box_23,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(9.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/box_23.png,ori_500/box_23.py,ori_500/box_23.png,ori_500/box_23.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below.
868,Customized Mimic,line_54,"There is a reference image for you and I also have a set of data about modes of transport and their fuel efficiency under different conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
modes_of_transport = [""Car"", ""Bus"", ""Bicycle"", ""Train""]
fuel_efficiency_city = [25, 8, 2, 50] # MPG for city conditions
fuel_efficiency_highway = [35, 12, 2, 67] # MPG for highway conditions
fuel_efficiency_rural = [30, 10, 3, 60] # MPG for rural conditions
fuel_efficiency_urban = [22, 7, 3, 45] # MPG for urban conditions
error = [2, 1, 0.5, 3] # Error margins

# Axes Limits and Labels
xlabel_value = ""Mode of Transport""
ylabel_value = ""Fuel Efficiency (MPG)""

# Titles
titles = [""City vs Highway"", ""Rural vs Urban"", ""Highway vs Rural""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(12.0, 4.0) to set the image size.
",ori_500/line_54.png,ori_500/line_54.py,customized_500/line_54.png,customized_500/line_54.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data modes of transport and their fuel efficiency under different conditions# Data for urban conditions fuels = [""Dry"", ""Rain"", ""Snow""] # Labels for urban conditions fuels = [""Mode of Transport"", ""Rural""] # Labels for rural conditions fuels = [""City vs Highway"", ""Rural vs Urban""] # Titles titles = [""City vs Highway"", ""Rural vs Urban""] # Data modes_of_transport = [""Car"", ""Bus"", ""Bicycle"", ""Train""] # Labels for city conditions fuels = [""Dry"", ""Rain"", ""Snow""] # Labels for rain and snow totals densities fuels = [""Rain"", ""Snow""] # Labels for driving style densities fuels = [""Passive"", ""Rail"", ""Replay"", ""Sportive""] # Labels for snow totals densities fuels = [""Passive"", ""Rail"", ""Replay"", ""Sportive""] # Labels for rain totals densities fuels = [""Rain"", ""Snow""] # Labels for snow totals densities fuels = [""Rain"", ""Snow""] # Labels for driving style densities fuels = [""Rain"", ""Snow""] # Labels for driving style densities fuels = [""Rain"", ""Snow""] # Labels for snow totals densities fuels = [""Rain"", ""Snow""] # Labels for driving style densities fuels = [""Rain"", ""Snow""] # Labels for snow totals densities fuels = [""Rain"", ""Snow""] # Labels for driving style densities fuels = [""Rain"", """
723,Customized Mimic,errorbar_4,"There is a reference image for you and I also have a set of data about airline flight times and passenger counts. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
airlines = [""Delta"", ""American"", ""United"", ""Southwest"", ""JetBlue""]
flight_time_means = [2.5, 3.2, 1.8, 2.0, 2.7]
flight_time_errors = [0.5, 0.6, 0.4, 0.5, 0.3]
passenger_count_means = [150.33, 180.67, 120.39, 145.99, 160.52]
passenger_count_errors = [20, 25, 15, 20, 18]

ylabel1 = ""Flight Time (hours)""
xlabel1 = ""(a) Flight Time by Airline""
ylabel2 = ""Number of Passengers""
xlabel2 = ""(b) Passenger Count by Airline""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size.
",ori_500/errorbar_4.png,ori_500/errorbar_4.py,customized_500/errorbar_4.png,customized_500/errorbar_4.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Data airlines = [""Delta"", ""American"", ""United"", ""Southwest"", ""JetBlue""] flight_time_means = [2.5, 3.2, 1.8, 2.0, 2.7] flight_time_errors = [0.5, 0.6, 0.5, 0.3] passenger_count_errors = [20, 25, 15, 20, 18] ylabel1 = ""Flight Time (hours)"" # X-label1 = ""(a) Flight Time by Airline"" # Y-label2 = ""Number of Passengers"" # X-label2 = ""(b) Passenger Count by Airline"" # Y-label2 = ""(c) Flight Time by Airline"" # Z-label2 = ""(d) Passenger Count by Airline"" # Z-label2 = ""(e) Passenger Count by Airline"" # Z-label2 = ""(f) Passenger Count by Airline"" # Z-label2 = ""(g) Passenger Count by Airline"" # Z-label2 = ""(h) Passenger Count by Airline"" # H-label2 = ""(i) Passenger Count by Airline"" # H-label2 = ""(j) Passenger Count by Airline"" # Z-label"
244,Direct Mimic,errorbar_25,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/errorbar_25.png,ori_500/errorbar_25.py,ori_500/errorbar_25.png,ori_500/errorbar_25.py,medium,"# Recall rates across products
recall_rates = [46.39, 50.19, 57.94, 53.88, 43.7] # Correctly labeled Recall rates across products
misleading_recall_rates = [50.19, 57.94, 53.88, 53.79, 43.7] # Correctly labeled Recall rates across products
fig, ax = plt.subplots(figsize=(8, 6))
ax.bar(recall_rates, misleading_recall_rates, color=""steelblue"", edgecolor=""black"", linewidth=1)
ax.bar(recall_rates, misleading_misleading_recall_rates, color=""orange"", edgecolor=""black"", linewidth=1)
ax.set_ylim(0, 70)
ax.set_yticks(np.arange(0, 71, 2))"
680,Customized Mimic,bar_96,"There is a reference image for you and I also have a set of data about energy efficiency recall rates for hydro and solar power sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data for the bar charts
truthful_recall = np.array(
[
[88.3, 85.9, 82.8],
[78.3, 75.7, 73.6],
[68.0, 65.6, 63.5],
[58.8, 56.2, 54.6],
[48.3, 45.9, 43.5],
]
)
misleading_recall = np.array(
[
[18.1, 21.6, 23.7],
[28.3, 31.0, 29.5],
[38.5, 41.6, 36.5],
[48.5, 51.8, 45.8],
[58.7, 61.6, 53.4],
]
)
x = [0, 1, 2]

# Titles for subplots
titles = [
""Hydro:Solar = 2:0"",
""Hydro:Solar = 2:1"",
""Hydro:Solar = 2:2"",
""Hydro:Solar = 1:2"",
""Hydro:Solar = 0:2"",
]
labels = [""Hydro Efficiency"", ""Solar Efficiency""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/bar_96.png,ori_500/bar_96.py,customized_500/bar_96.png,customized_500/bar_96.py,medium,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as pltimport matplotlib.gridspec as gridspec# ===================# Part 2: Data Preparation# ===================# Data for the bar charts contained in the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8, 8.0) to set the image size.truthful_recall = np.array([66.3, 61.9, 61.6, 53.8, 53.7, 51.8]) + np.random.rand(8) * 40.5 # Data for the bar chartsmisleading_recall = np.array([40.5, 42.6, 42.6, 36.5, 36.5, 42.8]) + np.random.rand(8) * 40.5 # Data for the bar chartstitles = [""Hydro:Solar = 2:0"", ""Hydro:Solar = 2:1"", ""Hydro:Solar = 2:2"", ""Hydro:Solar = 1:2"", ""Hydro:Solar = 0.2"", ""Labels = [""Hydro:Solar = 0.2"", ""Labels = [""Hydro:Solar = 0.2"", ""Labels = [""Hydro:Solar = 0.2"", ""Labels"
361,Direct Mimic,line_47,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_47.png,ori_500/line_47.py,ori_500/line_47.png,ori_500/line_47.py,easy,"# Plot the performance of the matrix over time.
fig, ax = plt.subplots(figsize=(8, 6))
ax.plot(x, y, color=""blue"", label=""Standard Performance"")
ax.fill_between(x, y[0], color=""pink"", label=label[0])
ax.fill_between(x, y[1], color=""pink"", label=label[1])
ax.fill_between(x, y[2], color=""blue"", label=label[2])
ax.fill_between(x, y[3], color=""blue"", label=label[3])"
649,Customized Mimic,bar_65,"There is a reference image for you and I also have a set of data about transportation method scores with different constraints. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation method scores data is as follows:
# Transportation methods
categories = [""Car"", ""Bicycle"", ""Train"", ""Bus""]
# Scores with different constraints
scores_3 = np.array([-4.51, -2.85, -3.97, -4.55])
scores_5 = np.array([-5.76, -3.54, -5.62, -1.08])
scores_7 = np.array([-0.36, -6.17, -2.08, -4.71])
scores_10 = np.array([-4.32, -0.74, -9.29, -9.13])
# Label of x axis
xlabel_value = ""Score""
# Title
ax_title = ""Scores by transportation method and number of constraints""
# Labels
label_3_Constraints = ""3 Constraints""
label_5_Constraints = ""5 Constraints""
label_7_Constraints = ""7 Constraints""
label_10_Constraints = ""10 Constraints""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_65.png,ori_500/bar_65.py,customized_500/bar_65.png,customized_500/bar_65.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that corresponds to the reference image and generates a grid of points that can be used to create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation method scores data is as follows: # Transportation methods categories = [""Car"", ""Bicycle"", ""Train"", ""Bus""] # Scores with different constraints scores_3 = np.array([4.51, -2.85, -3.97, -4.55]) scores_5 = np.array([5.76, -3.54, -5.62, -1.08]) scores_7 = np.array([-2.2, -0.74, -2.08, -4.71]) scores_10 = np.array([-4.32, -0.74, -9.29, -9.13]) # Labels label_3_Constraints = ""# Labels label_3_Constraints"" # Labels label_5_Constraints = ""# Labels label_10_Constraints = ""# 10 Constraints"" # Labels label_10_Constraints = ""# 10 Constraints"" # Labels label_10_Constraints = ""# 10 Constraints"" # Labels label_10_Constraints = ""# 10 Constraints"" # Labels label_10_Constraints = ""# 10 Constraints"" # Labels label_10_Constraints = ""# 10"
261,Direct Mimic,graph_2,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/graph_2.png,ori_500/graph_2.py,ori_500/graph_2.png,ori_500/graph_2.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport networkx as nx; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the graph (replace with actual data)G = nx.DiGraph() # Add a circle to the graph with actual data for the picture based on the original size in the original imageG.add_edge(0, 1, 0.2) # Add a edge to the original imageG.add_edge(0, 1, 0.3) # Add a edge to the original imageG.add_edge(0, 1, 0.4) # Add a edge to the original image# Add a circle to the graph with a square shape to match the original image """"""STEM paper """"""was created by the user and provided with the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Add a circle to the graph with a square shape and add a circle to the original image to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Add a circle to the graph with a square shape and add a circle to the original image to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Add a circle to the graph with a square shape and add a circle to the original image."
636,Customized Mimic,bar_52,"There is a reference image for you and I also have a set of data about Customer Service Interactions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
# Categories and data for a new field: Customer Service Interactions
categories = [
""Product Inquiry"",
""Order Issue"",
""Complaint"",
""Returns"",
""Technical Support"",
""Billing Question"",
""Feedback"",
]
synthetic_data = [
-9,
-27,
-20,
-12,
-18,
-22,
-15,
] # Add negative sign to synthetic data
human_data = [18, 30, 14, 8, 20, 25, 12]
labels = [""synthetic data"", ""human-authored data""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.
",ori_500/bar_52.png,ori_500/bar_52.py,customized_500/bar_52.png,customized_500/bar_52.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.synthetic_data = [-9, -27, -20, -12, -18, -22, -15, -15, ] # Add negative sign to synthetic data humanist data = [18, 30, 14, 8, 20, 25, 12] labels = [""synthetic data"", ""human-authored data""] # Human-Authored Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents my data. # Data for the reference image and accurately represents"
721,Customized Mimic,errorbar_2,"There is a reference image for you and I also have a set of data about reviewer accuracy percentages across different review protocols. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data
judges = [""Mona"", ""Lisa"", ""Charlie"", ""Alex""]
protocols = [
""Screening"",
""Evaluation"",
""Consultation"",
""Interactive Review"",
""Discussion"",
""Interactive Discussion"",
]

accuracy_means = np.array(
[
[100, 72, 65, 78, 84, 90], # Mona
[99, 75, 68, 81, 86, 93], # Lisa
[98, 78, 70, 83, 88, 95], # Charlie
[99, 80, 72, 85, 90, 98], # Alex
]
)

accuracy_std = np.array(
[
[4, 4, 4, 4, 4, 4], # Mona
[4, 4, 4, 4, 4, 4], # Lisa
[4, 4, 4, 4, 4, 4], # Charlie
[4, 4, 4, 4, 4, 4], # Alex
]
)

legendtitle = ""Review Protocol""
xlabel = ""Reviewer""
ylabel = ""Reviewer Accuracy (%)""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/errorbar_2.png,ori_500/errorbar_2.py,customized_500/errorbar_2.png,customized_500/errorbar_2.py,medium,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data.  import numpy as np;np.random.seed(0) # Data judges = [""Mona"", ""Lisa"", ""Charlie"", ""Alex""] protocols = [ [""Screening"", ""Evaluation"", ""Consultation"", ""Interactive Review"", ""Discussion"", ""Interactive Discussion""] # Data judges = [""Interactive Review"", ""Discussion"", ""Interactive Discussion"", ""Interactive Debate""] # Data judges = [""Human"", ""Interactive Debate""] # Data judges = [""Human"", ""Interactive Debate""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges = [""Human""] # Data judges ="
138,Direct Mimic,bar_54,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 2.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_54.png,ori_500/bar_54.py,ori_500/bar_54.png,ori_500/bar_54.py,easy,<img_src=probability-of-improvement-over-vlm-image-encoder-baseline-returns img_alt=Probability of Improvement over VLM Image Encoder Baseline Returns>
204,Direct Mimic,box_20,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/box_20.png,ori_500/box_20.py,ori_500/box_20.png,ori_500/box_20.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the boxplots (replace with actual data) and the correct response ratio for the picture provideddigit_span = [3.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 8.0] # Correct word reaction time (s) for digit span and lexical decision boundary value for the picture providedlexical_decision = [0.6, 0.8, 1.2, 1.4, 0.9, 0.8, 2.25] # Correct response ratio for lexical decision value for the picture providedreaction_time = [0.5, 0.8, 0.9, 1.0, 1.2, 2.25] # Time per tab (s) for trail making# Axes Limits and Labels for the boxplots with correct correct response ratio for the picture providedxlabel_value = ""Longest correct sequence""ylabel_value = ""Correct word reaction time (s)""title_1 = ""Digit span""title_2 = ""Lexical decision""title_3 = ""Correct response ratio""# ===================# Part 3: Plot Configuration and Rendering# ===================# Create a figure with 4 subplots and 4 subplots and 4 subplots and 4 subplots"
661,Customized Mimic,bar_77,"There is a reference image for you and I also have a set of data about key health indicators across countries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


health_indicators = [""Life Expectancy"", ""Infant Mortality Rate"", ""Obesity Rate"", ""Access to Clean Water"", ""Healthcare Expenditure""]
values = [72.6, 3.2, 23.1, 92.8, 9.8] # Example values (Life Expectancy in years, Infant Mortality Rate per 1000 births, Obesity Rate in percentage, Access to Clean Water in percentage, Healthcare Expenditure in percentage of GDP)
xlabel = ""Health Indicator""
ylabel = ""Value""
title = ""Key Health Indicators Across Countries""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 4.0) to set the image size.
",ori_500/bar_77.png,ori_500/bar_77.py,customized_500/bar_77.png,customized_500/bar_77.py,easy,"# Add the above text to the figure and set the figure size to match the original image's dimensions.
fig, ax = plt.subplots(figsize=(8, 6))
# Plot the data in the bar chart.
ax.bar( Beijing, average_temperature, color=""skyblue"", edgecolor=""black"")
ax.bar( Shanghai, average_temperature, color=""skyblue"", edgecolor=""black"")
ax.bar( Guangzhou, average_temperature, color=""skyblue"", edgecolor=""black"")
ax.set_xlabel(""City"")
ax.set_ylabel(""Average Temperature (°C)"")
ax.set_title(""Average City Temperatures"")"
597,Customized Mimic,bar_13,"There is a reference image for you and I also have a set of data about energy efficiency improvements across different models and types of renewable energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data
models = [""SolarBoost"", ""WindStream"", ""HydroFlow"", ""GeoThermal""]
energy_types = [""Solar"", ""Wind"", ""Hydro"", ""Geothermal"", ""Bioenergy""]
improvements = {
""Solar"": [5, 1.5, 1.3, 3.5],
""Wind"": [2.5, 2.3, -2.2, 2.8],
""Hydro"": [4.4, 0.8, -1, 1.3],
""Geothermal"": [4.0, 1.5, -2, 1.3],
""Bioenergy"": [4.4, -0.7, -3.9, 1.3],
}

xlabel = ""Model""
ylabel = ""Efficiency Improvement [%]""
legendtitle = ""Energy Type""
title = ""Energy Efficiency Improvement by Model and Energy Type""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_13.png,ori_500/bar_13.py,customized_500/bar_13.png,customized_500/bar_13.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data models for your code and generate Energy Efficiency improvements according to your energy efficiency improvements across different models and types of renewable energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Data models = [""SolarBoost"", ""WindStream"", ""HydroFlow"", ""Geothermal""] energy_types = [""Solar"", ""Wind"", ""Hydro"", ""Geothermal""] # Energy efficiency improvements across different models and types of renewable energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Data models = [""SolarBoost"", ""WindStream"", ""HydroFlow"", ""Geothermal""] energy_types = [""Solar"", ""Wind"", ""Hydro"", ""Geothermal""] # Bioenergy improvements = {""Solar"": [5, 1.5, 1.3, 3.5], ""Wind"": [2.5, 2.3, -2.2, 2.8], ""Hydro"": [4.4, 0.8, -1.3], ""Geothermal"": [4.0, 1.5, -2, 1.3], ""Bioenergy"": [4.4, -0.7, -3.9, 1.3], ""Xlabel"": [""Improvement"
79,Direct Mimic,PIP_10,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/PIP_10.png,ori_500/PIP_10.py,ori_500/PIP_10.png,ori_500/PIP_10.py,hard,"# Importing Libraries for plotting
import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np; np.random.seed(0) # Generate random noise for illustration purposes
from matplotlib.colors import LogNorm
from matplotlib.lines import Line2D
from matplotlib.lines import Line4D
# Generating random data for illustration purposes
random_data = np.random.rand(200) * 250 # Random data for exponential data
exponential_data = np.random.rand(200) * 250 # Exponential data for exponential data
# Plotting the line
plt.figure(figsize=(8, 8))
plt.plot(random_data, exponential_data, ""^-"", linewidth=1.2, color=""green"")
plt.plot(exponential_data, exponential_data, ""*"", linewidth=1.2, color=""red"")
# Adding labels and title
plt.xlabel(""Gradient Steps (x 62.5K)"")
plt.ylabel(""Exponential Scale"")
# Adding the legend and add legend
plt.legend([""Line 3 (Random Noise)"", ""Line 4 (Exponential Focus)""])"
644,Customized Mimic,bar_60,"There is a reference image for you and I also have a set of data about fuel efficiency changes for different car models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The fuel efficiency changes data is as follows:
# Car models
car_models = [""Sedan"", ""SUV"", ""Truck"", ""Hybrid"", ""Electric""]
# Changes in fuel efficiency
fuel_efficiency_changes = [10.5, -5.2, -2.0, 12.3, 15.7]
# Title
title = ""Fuel Efficiency Improvements""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/bar_60.png,ori_500/bar_60.py,customized_500/bar_60.png,customized_500/bar_60.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for fuel efficiency changes in fuel efficiency changes for different car models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The fuel efficiency changes data is as follows: # Car models car_models = [""Sedan"", ""Truck"", ""Hybrid"", ""Electric""] # Changes in fuel efficiency fuels_efficiency_changes = [10, -5, -2, -2.0, 12.3, 15.7] # Title title = ""Fuel Efficiency Improvements""# ===================# Part 3: Plot Configuration and Rendering# ===================fig, ax = plt.subplots(figsize=(10, 8)) # Adjusting figure size to match the original image's dimensionsfor i, (ax, (model, fuel_efficiency_changes)): # Adding text annotation to the image to indicate the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 8.0) to set the image size.# Plot the reference image and generate Python matplotlib code that accurately mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you"
991,Customized Mimic,violin_2,"There is a reference image for you and I also have a set of data about scores for different categories across two sessions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:The categories are ""Speed"", ""Strength"", and ""Endurance"".
# Data
 data_1 = [[0.91, 0.91, 0.49], [0.6, 0.99, 0.35], [0.88, 0.74, 0.01], [0.91, 0.84, 0.3], [0.73, 0.99, 0.29], [0.9, 0.96, 0.15], [0.8, 1.0, 0.24], [0.66, 0.94, 0.17], [0.83, 0.96, 0.26], [0.36, 0.93, 0.34]]
data_2 = [[0.91, 0.91, 0.49], [0.6, 0.99, 0.35], [0.88, 0.74, 0.01], [0.91, 0.84, 0.3], [0.73, 0.99, 0.29], [0.9, 0.96, 0.15], [0.8, 1.0, 0.24], [0.66, 0.94, 0.17], [0.83, 0.96, 0.26], [0.36, 0.93, 0.34]]
# Width
width = 0.02
# Axes Labels
ylabel_value = ""Score""
# Labels
labels = [""Session 1"", ""Session 2""]

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.
",ori_500/violin_2.png,ori_500/violin_2.py,customized_500/violin_2.png,customized_500/violin_2.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. The data is follows:The categories are ""Speed"", ""Strength"", and ""Endurance"". # Data 1 = [0.91, 0.91, 0.49], [0.66, 0.96, 0.35], [0.88, 0.74, 0.29], [0.91, 0.84, 0.35], [0.93, 0.83, 0.96], [0.96, 0.95, 0.34]# Labels and Plot Types for the chart that accurately mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(6.0, 6.0) to set the image size. Store / hide_borders(figsize=(6, 6)) # Use figsize to prevent overlap with the picture. Store the data in the ""Without Memory"" and ""With Memory"" categories. Store the data in the ""With Memory"" and ""Safety"" categories. Store the data in the ""With Memory"" and ""Safety"" categories. Store the data in the ""With Memory"" and ""Safety"" categories"
851,Customized Mimic,line_37,"There is a reference image for you and I also have a set of data about fuel efficiency as it relates to the number of cargo units. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data
cargo_units = np.arange(5, 31, 1)
fuel_efficiency_mean = np.array(
[
25.2, 24.8, 24.5, 24.2, 23.9, 23.6, 23.4, 23.2, 23.0, 22.8,
22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.1, 22.0, 21.9, 21.8,
21.7, 21.6, 21.5, 21.4, 21.3, 21.2
]
)
fuel_efficiency_std = np.array(
[
1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.3, 0.3, 0.3, 0.3, 
0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 
0.3, 0.3
]
)

# Axes Limits and Labels
xlabel_value = ""Number of Cargo Units"")

ylabel_value = ""Fuel Efficiency (MPG)""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 5.0) to set the image size.
",ori_500/line_37.png,ori_500/line_37.py,customized_500/line_37.png,customized_500/line_37.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Sample data for you and I also have a set of data about fuel efficiency as it relates to the number of cargo units. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.  # Sample data cargo_units = np.arange(5, 31, 1) fuel_efficiency_mean = np.array([25.2, 24.8, 24.5, 23.9, 23.6, 23.4, 23.2, 23.0, 22.8, 22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.1, 21.9, 21.8, 21.7, 21.6, 21.5, 21.4, 21.2]) # Fuel Efficiency (MPG) Data for the ensemble size. Data for the ensemble size. Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Here: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(6.0, "
747,Customized Mimic,errorbar_28,"There is a reference image for you and I also have a set of data about business factors affecting employee productivity. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The business factors data is as follows:
# Category of business factors
categories = [""Work Environment"", ""Management Quality"", ""Training Programs"", ""Work-Life Balance"", ""Salary and Benefits"", ""Company Culture"", ""Job Security"", ""Career Growth Opportunities"", ""Workload"", ""Commute Time"",]
# Impact on Employee Productivity
values = [0.21, 0.20, 0.13, 0.10, 0.05, 0.05, -0.09, -0.08, -0.02, -0.01]
# Error values
errors = [0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.01, 0.01, 0.01]
# Label of y axis
ylabel_value = ""Business Factors""
# Label of x axis
xlabel_value = ""Impact on Employee Productivity (Δ to baseline)""
# Normalizing function to convert values to a 0-1 range for color scaling
def normalize(value, min_val, max_val):
    return (value - min_val) / (max_val - min_val)
# Determine color based on normalized value
def get_color(value):
    norm_value = normalize(value, min_val, max_val)
    blue_base = np.array(mcolors.to_rgb(""#6a8347""))
    return mcolors.to_hex((1 - blue_base) * (1 - norm_value) + blue_base)

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/errorbar_28.png,ori_500/errorbar_28.py,customized_500/errorbar_28.png,customized_500/errorbar_28.py,easy,"# Importing Libraries Data Preparation Data for the boxplots
import matplotlib.pyplot as plt; plt.rcdefaults() # Creating a custom matplotlib figure with specific dimensions to match the picture
import numpy as np; np.random.seed(0) # Generating random data for illustration purposes
# Generating random data for illustration purposes
data = np.random.uniform(-0.15, 0.13, 100) # Planting Density
plant_var = np.random.uniform(-0.15, 0.09, 100) # Plant Variety
co2_levels = np.random.uniform(-0.15, 0.09, 100) # Pesticides
temperature = np.random.uniform(-0.15, 0.09, 100) # Temperature (to -0.1)
soil_ph = np.random.uniform(-0.15, 0.09, 100) # Soil pH
water_quality = np.random.uniform(-0.15, 0.09, 100) # Water Quality
# Plot the boxplots with error values to generate a color map that accurately represents my data.
fig, ax = plt.subplots(figsize=(8, 8)) # Adjust the figure size to match the original image's dimensions"
143,Direct Mimic,bar_59,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_59.png,ori_500/bar_59.py,ori_500/bar_59.png,ori_500/bar_59.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the boxplots provideddata = np.array([[-80, -60, -40, -20, 0, 10, 20], [-60, -40, -20, -10, 0, 10, 20]]) # Segmented data for the boxplots providedsemantic_categories = [(""External Class"", ""Argument"", ""Loop"", ""Conditional Statement"", ""Variable Declaration"", ""Method Declaration"", ""Parameter"")] # Segmented data for the boxplots providedpos_difference = np.array([0, 10, 30, 40, 50, 60]) # Segmented data for the boxplots provided# Labels and Plot Typeslabel_1 = ""Positive Difference""label_2 = ""Neutral Difference""title = ""Relative Difference in Machine vs. Human Focus on Semantic Categories""xlabel = ""Difference (%)""ylabel = ""Semantic Category""title = ""Relative Difference in Machine vs. Human Focus on Semantic Categories""# ===================# Part 3: Plot Configuration and Rendering# ===================# Create the matplotlib figure and axis with the specified size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.fig, ax = plt.subplots"
875,Customized Mimic,line_61,"There is a reference image for you and I also have a set of data about fuel efficiency and emission levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
weeks = np.arange(1, 29)
fuel_efficiency_data = np.array([32.88, 32.57, 34.1, 36.15, 36.37, 33.9, 35.95, 34.72, 34.4, 34.32, 33.26, 33.62, 31.87, 30.12, 29.33, 28.16, 28.38, 25.89, 25.81, 24.27, 22.45, 25.78, 26.36, 25.35, 29.15, 26.38, 28.93, 29.81])
emission_level_data = np.array([138.17, 139.33, 135.14, 139.42, 136.88, 135.65, 148.26, 155.23, 164.83, 168.48, 163.7, 166.51, 164.26, 162.9, 160.97, 177.77, 163.09, 160.28, 152.41, 158.34, 141.93, 144.49, 136.84, 139.46, 131.81, 126.08, 130.36, 132.14])

# Calculate the upper and lower bounds for the data
fuel_efficiency_upper = fuel_efficiency_data + 2
fuel_efficiency_lower = fuel_efficiency_data - 2
emission_level_upper = emission_level_data + 10
emission_level_lower = emission_level_data - 10

# Axes Limits and Labels
xlabel_value = ""Weeks""
ylabel_value = ""Values""

# Labels
label_fuel_efficiency = ""Fuel Efficiency""
label_emission_level = ""Emission Level""

# Titles
title = ""Fuel Efficiency and Emission Levels Analysis""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/line_61.png,ori_500/line_61.py,customized_500/line_61.png,customized_500/line_61.py,easy,# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the performance analysis and efficiency charts for the Python matplotlib code that calculates the style of the reference image and accurately represents my data. Data for the performance analysis and efficiency charts for the Fuel Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_efficiency_lower. Data for the performance analysis and efficiency charts for the Fuel Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_fuel_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency label_fuel_efficiency_lower. Data for the Performance and Efficiency label_fuel_efficiency_upper and Fuel Efficiency
299,Direct Mimic,hist_5,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(4.0, 3.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/hist_5.png,ori_500/hist_5.py,ori_500/hist_5.png,ori_500/hist_5.py,easy,"# Importing Libraries matplotlib.pyplot as plt to create a histogram of the data
# This will give me the matplotlib code that reproduces the picture below.
# I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
# Note that it is necessary to use figsize=(4.0, 3.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.
# I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
# Note that it is necessary to use figsize=(4.0, 3.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.
# I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
# Note that it is necessary to use figsize=(4.0, 3.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.
# I need your help to generate the matplotlib code that reproduces the picture below.
# I need your help to generate the matplotlib code that reproduces the picture below.
# I need your help to generate the matplotlib code that reproduces the picture below.
# I need your help to generate the matplotlib code that reproduces the picture below."
615,Customized Mimic,bar_31,"There is a reference image for you and I also have a set of data about ""comparisons between different decision-making entities in various matchups"". Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Updated data
categories = [
""AI vs. Human"",
""AI vs. Hybrid"",
""AI vs. Rule-Based"",
""Human vs. Hybrid"",
""Human vs. Rule-Based"",
""Hybrid vs. Rule-Based"",
][::-1]
win = [22.0, 26.0, 30.0, 35.0, 32.0, 28.0][::-1]
tie = [50.0, 55.0, 60.0, 52.0, 54.0, 58.0][::-1]
loss = [28.0, 19.0, 10.0, 13.0, 14.0, 14.0][::-1]

labels = [""Win"", ""Tie"", ""Loss""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/bar_31.png,ori_500/bar_31.py,customized_500/bar_31.png,customized_500/bar_31.py,medium,<<img_src=win_200 img_alt=Win> <img_src=tie_200 img_alt=Tie> <img_src=loss_200 img_alt=Loss>>
59,Direct Mimic,HR_15,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/HR_15.png,ori_500/HR_15.py,ori_500/HR_15.png,ori_500/HR_15.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the plot (replace with actual data) and approximate the picture based on the picture based on the picture I provide. Note that it is necessary to use figsize=(10.0, 4.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Data for the plot (replace with actual data)s = np.array([19, 50, 76, 142, 232]) # s = 19 pixels in pixels for m^2
m = np.array([10, 4, 10, 10]) # m^2 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for m^4 values for"
315,Direct Mimic,line_1,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_1.png,ori_500/line_1.py,ori_500/line_1.png,ori_500/line_1.py,easy,<<Classification Accuracy (%)> <<img_src=JPEG-LDPC img_alt=JPEG+LDPC> <img_src=DEEPJSCC img_alt=DEEPJSCC w/o ofdm> <img_src=DEEPJSCC img_alt=DEEPJSCC w/ ofdm> <img_src=OURS img_alt=OURS>> <img_src=SNR img_alt=SNR>>
896,Customized Mimic,multidiff_2,"There is a reference image for you and I also have a set of data about athlete performance and resource allocation in sports facilities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data for the histogram: scores from two types of assessments
test_scores_public = np.random.normal(loc=60, scale=10, size=1000) # e.g., scores from public training facilities
test_scores_private = np.random.normal(loc=100, scale=10, size=1000) # e.g., scores from private training facilities

# Data for the pie chart: resource allocation
labels = [""Equipment"", ""Training"", ""Facilities"", ""Nutrition"", ""Coaching""]
budget = [25, 20, 30, 15, 10]
explode = (0.1, 0, 0, 0, 0) # highlight the largest segment
titles= [""Athlete Performance in Training"", ""Resource Allocation in Sports Facilities""]
xlabel = ""Performance Score""
ylabel = ""Number of Athletes""
histlabels = [""Public Training"", ""Private Training""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size.
",ori_500/multidiff_2.png,ori_500/multidiff_2.py,customized_500/multidiff_2.png,customized_500/multidiff_2.py,medium,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the pie chart illustrating the data for the resource allocation in sports facilities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. ;;import numpy as np;np.random.seed(0) # Data for the histogram: scores from two types of assessments test_scores_public = np.random.normal(loc=60, scale=10, size=1000) # e.g., scores from public training facilities tags = [np.random.normal(loc=100, scale=10, size=1000) # e.g., scores from private training facilities  # Data for the pie chart: resource allocation labels = [""25, 20, 30, 15, 10] explode = [0.1, 0, 0, 0, 0] # highlight the largest segment titles=[""Athlete Performance in Training"", ""Resource Allocation in Sports Facilities""] # Add a circle that represents the style of the reference image and accurately represents my data.# Data for the histogram: scores from two types of assessments test_scores_public = np.random.normal(loc=60, scale=10, size=1000) # e.g., scores from private training facilities"
219,Direct Mimic,density_5,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(9.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/density_5.png,ori_500/density_5.py,ori_500/density_5.png,ori_500/density_5.py,easy,"# Importing Libraries matplotlib.pyplot as plt to create a new figure and axis.
import matplotlib.lines as mlines as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as mpatches as "
528,Customized Mimic,CB_14,"There is a reference image for you and I also have a set of data about traffic flow patterns on weekdays and weekends. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data (replace with actual data)
traffic_flow_weekday = np.random.normal(1400, 200, 1000)
traffic_flow_weekend = np.random.normal(1000, 200, 1000)

min_bin = min(min(traffic_flow_weekday), min(traffic_flow_weekend))
max_bin = max(max(traffic_flow_weekday), max(traffic_flow_weekend))

bins = np.linspace(min_bin, max_bin, 30)
bin_width = bins[1] - bins[0]
labels = [""Weekday Traffic"", ""Weekend Traffic""]
legend_title = ""Traffic Type""
title = ""Traffic Flow Distribution""
xlabel = ""Traffic Flow (vehicles per hour)""
ylabel = ""Frequency""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/CB_14.png,ori_500/CB_14.py,customized_500/CB_14.png,customized_500/CB_14.py,medium,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the histogram and histogram for the traffic flow patterns on weekdays and weekends. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.  import numpy as np;np.random.seed(0) # Sample data (replace with actual data) ta.hist(reference, norm=True, color=""skyblue"", edgecolor=""black"", linewidth=1.2)# Add a vertical line at the beginning of the histogram to ensure that the data is not skewed. Data for the random normal distribution. Also, make sure that the data is not generated completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.# ===================# Part 3: Plot Configuration and Rendering# ===================plt.figure(figsize=(10, 6)) # Adjusting figure size to match the original image dimensions and creating a histogram to match the original image dimensions"
531,Customized Mimic,CB_17,"There is a reference image for you and I also have two sets of data about test methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Methods
methods = [""Method A"", ""Method B"", ""Method C"", ""Method D""]
# Average Scores
average_scores = [0.785, 0.823, 0.856, 0.902]
# Label of y axis 1
ax1_ylabel = ""Scores""
Title 2
ax1_title = ""Average Test Scores by Method""
# Pass Rates
pass_rates = [0.76, 0.83, 0.88, 0.95]
# Label of y axis 2
ax2_ylabel = ""Rates""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size.
",ori_500/CB_17.png,ori_500/CB_17.py,customized_500/CB_17.png,customized_500/CB_17.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting provided by CodeBERT and ChatGPT-3.5 and CodeAgent for Python matplotlib code that accurately mirrors the style of the reference image and accurately represents my data. The data is as follows: # Methods methods = [""Method A"", ""Method B"", ""Method C"", ""Method D""] # Average Scores average_scores = [0.785, 0.823, 0.856, 0.902] # Label of y axis 1 ax1_ylabel = ""Scores"" Title 2 ax1_title = ""Average Test Scores by Method"" # Pass Rates pass_rates = [0.76, 0.83, 0.88, 0.95] # Label of y axis 2 ax2_ylabel = ""Rates""  Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows: # Methods methods = [""Method A"", ""Method B"", ""Method C"", ""Method D""] # Average Scores average_scores = [0.785, 0.823, 0.856, 0.902] # Label of y axis 1 ax1_ylabel = ""Scores"" Title 2 ax1_title = ""Average Test Scores by Method"" # Pass Rates pass_rates = ["
996,Customized Mimic,violin_7,"There is a reference image for you and I also have a set of data about financial growth and economic stability. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data for demonstration purposes
features = np.arange(1, 6)
financial_growth_data = np.random.rand(20, 100) * 450
economic_stability_data = np.random.rand(20, 100) * 150
titles=[""% Increase in ROI vs. Baseline A"",""% Increase in ROI vs. Baseline B""]
xlabel=""Number of Features""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/violin_7.png,ori_500/violin_7.py,customized_500/violin_7.png,customized_500/violin_7.py,medium,# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for demonstration purposes — np.random.seed(0) — AGIS — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data — reference image data
970,Customized Mimic,scatter_11,"There is a reference image for you and I also have a set of data about average scores and study hours in different subjects. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Subjects
names = [""Math"", ""Science"", ""Literature"", ""History"", ""Art"", ""Music""]
# Average scores
x = [85, 90, 75, 80, 70, 95]
# Average study hours per week
y = [4.5, 4.0, 3.5, 3.0, 2.5, 5.0]
# Number of students (represented by bubble size)
sizes = [300, 600, 900, 1200, 1500, 1800]
# Colors for each subject
colors = [""purple"", ""blue"", ""green"", ""yellow"", ""orange"", ""red""]
# Label of x axis
xlabel_value = ""Average Scores""
# Label of y axis
ylabel_value = ""Average Study Hours per Week""
# Scatter Label
scatter_label = ""Bubble Size: Number of Students""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/scatter_11.png,ori_500/scatter_11.py,customized_500/scatter_11.png,customized_500/scatter_11.py,easy,"# Create bubble chart with average scores and study hours in different subjects.
bubble_size = [300, 600, 900, 1200, 1800] # Colors for each subject colors = [""purple"", ""blue"", ""green"", ""yellow"", ""orange""] # Label of x axis xlabel_value = ""Average Score"" # Label of y axis ylabel_value = ""Average Study Hours per Week"" # Scatter Label scatter_label = ""Bubble Size: Number of Students"" # Average score x = [85, 90, 75, 80, 70, 95] # Average study hours per week y = [4.5, 4.0, 3.5, 3.0, 2.5, 5.0] # Number of students (represented by bubble size) sizes = [300, 600, 900, 1200, 1800] # Colors for each subject colors = [""purple"", ""blue"", ""green"", ""yellow"", ""orange"", ""red""] # Label of x axis xlabel_value = ""Average Scores"" # Label of y axis ylabel_value = ""Average Study Hours per Week"" # Scatter Label scatter_label = ""Bubble Size: Number of Students"" #"
903,Customized Mimic,multidiff_9,"There is a reference image for you and I also have a set of data about athlete performance categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
import numpy as np
import matplotlib.pyplot as plt

# Data for simulated athlete performance categories
athletes = [
""Usain Bolt"",
""Michael Phelps"",
""Simone Biles"",
""Serena Williams"",
""Cristiano Ronaldo"",
""LeBron James"",
""Lionel Messi"",
""Roger Federer"",
""Tom Brady"",
""Rafael Nadal"",
""Tiger Woods"",
""Megan Rapinoe"",
""Naomi Osaka"",
""Stephen Curry"",
""Novak Djokovic"",
""Kevin Durant"",
]
n_categories = len(athletes)
performance_correct = np.random.uniform(200, 800, n_categories)
performance_incorrect = performance_correct - np.random.uniform(50, 200, n_categories)
sorted_indices = np.argsort((performance_correct + performance_incorrect) / 2)
categories = np.array(athletes)[sorted_indices]
performance_correct = performance_correct[sorted_indices]
performance_incorrect = performance_incorrect[sorted_indices]

# Colors and assignments for the first plot
assignments = [""Nike"", ""Adidas"", ""Puma"", ""Reebok""]

# Data for the second plot (error bar plot with legend)
for i in range(len(assignments)):
aggregate_performance = np.random.randint(-150, 150, size=5)
correct_score = np.random.randint(50, 300, size=5)
error = np.random.randint(5, 25, size=5)

# Data for the third plot (scatter plot with trend line and correct text)
aggregate_scores = [
np.linspace(600, 800, 5) - 100 * i + np.random.randint(-30, 30, 5)
for i in range(len(assignments))
]
judge_ratings = [
np.linspace(70, 90, 5) - 10 * i + np.random.randint(-15, 15, 5)
for i in range(len(assignments))
]
scatterlabels = [""Correct Score"", ""Incorrect Score""]
xlabels = [""Performance Rating"", ""Aggregate Performance Rating"", ""Aggregate Performance Rating""]
ylabels = [""Athlete"", ""Correct Score - Incorrect Score"", ""Judge Rating (%)""]

ax2textlabel = ""Judge: Elite Coach""
title = ""Athletes""
text_j = 650
text_i = 25


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 4.0) to set the image size.
",ori_500/multidiff_9.png,ori_500/multidiff_9.py,customized_500/multidiff_9.png,customized_500/multidiff_9.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np;np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the third plot (scatter plot with trend line and correct text)aggregate_scores = [np.linspace(60, 30, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np.random.randint(-100, 40, 5) + np"
10,Direct Mimic,3d_11,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/3d_11.png,ori_500/3d_11.py,ori_500/3d_11.png,ori_500/3d_11.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data to mimic the picture provided by the image and set the original size to match the original size. Function to create a matplotlib figure. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Data to match the original size. Customize the matplotlib figure. Continuing the process, I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Note that it is necessary to use figsize=(8, 6.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# ===================# Part 3: Plot Configuration and Rendering# ===================fig = plt.figure(figsize=(8, 6)) # Adjusting figure size to match the original size."
939,Customized Mimic,quiver_5,"There is a reference image for you and I also have a set of data about wind patterns. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Define the vector field function
def vector_field(X, Y):
# Placeholder function for the vector field
# Replace with the actual function based on the provided image
U = Y
V = -2 * X
return U, V
# Create a finer grid of points
x = np.linspace(-2.0, 2.0, 20)
y = np.linspace(-2.0, 2.0, 20)
X, Y = np.meshgrid(x, y)

# Compute the vector field
U, V = vector_field(X, Y)
xlabel = ""Longitude""
ylabel = ""Latitude""
title = ""Simulated Wind Patterns""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 5.0) to set the image size.
",ori_500/quiver_5.png,ori_500/quiver_5.py,customized_500/quiver_5.png,customized_500/quiver_5.py,hard,"# ===================# Part 1: Importing Libraries# ===================import numpy as np;np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Define the vector field function def vector_field(X, Y): # Placeholder function for the vector field # Replace with the actual function based on the provided image Ú = Y = -2 * X return U, V # Create a finer grid of points x = np.linspace(-2, 2, 20) + np.random.normal(-2, 2, 20) + X, Y = np.meshgrid(x, y) # Compute the vector field U, V = vector_field(X, Y) # Xlabel = ""Longitude"" datael = ""Latitude"" title = ""Simulated Wind Patterns"" # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(6.0, 5.0) to set the image size. Palisade = plt.figure(figsize=(6.0, 5.0)) # Set the figure size to match the original image's dimensionsplt.scatter(X, Y, c=""lightblue"", edgecolor=""black"") # Plot the data"
333,Direct Mimic,line_19,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(5.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/line_19.png,ori_500/line_19.py,ori_500/line_19.png,ori_500/line_19.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the picture based on the picture providedfraction_training_data = np.array([59, 55, 62, 65, 67]) + np.random.normal(loc=5, scale=1, size=1000) + np.random.normal(loc=4, scale=0.5, size=1000) + np.random.normal(loc=8, scale=0.2, size=1000) + np.random.normal(loc=10, scale=0.3, size=1000) + np.random.normal(loc=10, scale=0.4, size=1000) + np.random.normal(loc=8, scale=0.3, size=1000) + np.random.normal(loc=8, scale=0.2, size=1000)# Labels and Plot Typeslabel_Full = ""Full"" | SPT | VPT | VPT"" stature = ""Test accuracy (%)"" position = [42, 42.5, 42.5, 42.5] length = 42.5 | 42.5 | 42.5 | 42.5] color = ""blue"" height = 42.5 | 42.5 | 42.5 | 42.5] # Size"
69,Direct Mimic,HR_25,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/HR_25.png,ori_500/HR_25.py,ori_500/HR_25.png,ori_500/HR_25.py,hard,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the heatmap. The heatmap is a 2x2 grid of 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids. The grids are 4x4 grids.
135,Direct Mimic,bar_51,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(12.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_51.png,ori_500/bar_51.py,ori_500/bar_51.png,ori_500/bar_51.py,easy,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart — the number of videos per profession — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide — the number of videos that I provide —
484,Direct Mimic,scatter_25,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(15.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/scatter_25.png,ori_500/scatter_25.py,ori_500/scatter_25.png,ori_500/scatter_25.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the Matplotlib code based on the given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide. Note that it is necessary to use figsize=(15.0, 5.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.# Define the average precision on MSCOCO (%) for the average precision on MSCOCO (%) values.
average_precision = np.array([30, 35, 40, 45, 50]) # Average Precision on MSCOCO (%) values for average precision values for MSCOCO (%) values.
# Plot the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision values for the average precision"
880,Customized Mimic,line_66,"There is a reference image for you and I also have a set of data about the performance of different models in achieving fuel efficiency targets. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data for the plot
iterations = np.array([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000])

# Simulated data for the models with distinct trends
data = {
""Model A"": (
np.array([0.14, 0.21, 0.33, 0.46, 0.56, 0.61, 0.76, 0.84, 0.95]),np.array([0.16, 0.24, 0.35, 0.43, 0.5, 0.6, 0.68, 0.79, 0.85])
),
""Model B"": (
np.array([0.24, 0.3, 0.39, 0.51, 0.59, 0.62, 0.74, 0.81, 0.9]),np.array([0.26, 0.33, 0.44, 0.5, 0.57, 0.65, 0.73, 0.83, 0.88])
),
""Model C"": (
np.array([0.34, 0.38, 0.46, 0.56, 0.63, 0.64, 0.75, 0.8, 0.88]), np.array([0.21, 0.28, 0.39, 0.45, 0.52, 0.6, 0.68, 0.78, 0.83])
),
""Model D"": (
np.array([0.09, 0.15, 0.26, 0.38, 0.46, 0.5, 0.63, 0.7, 0.8]), np.array([0.11, 0.19, 0.3, 0.37, 0.44, 0.53, 0.62, 0.72, 0.78])
),
}
# Axes Limits and Labels
xlabel_value = ""Iterations""

ylabel_value = ""Success Rate""

# Labels
label_1 = "" Fuel Efficiency Target 1""
label_2 = "" Fuel Efficiency Target 2""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/line_66.png,ori_500/line_66.py,customized_500/line_66.png,customized_500/line_66.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the plot with different data for the models with distinct trends data (""Model A"" and ""Model B"")iterations = np.arange(0, 2000, 20) # Iterations is the number of data points for each model in the series that accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 8) # Adjusting figure size to match the original image dimensions provided by your code. Data for the plot with distinct trends data (""Model A"" and ""Model B"")iterations = np.arange(0, 2000, 20) # Iterations is the number of data points for each model in the series that accurately represents my data. Here you must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 8) # Adjusting figure size to match the original image dimensions provided by your code. Data for the plot with distinct trends data (""Model A"" and ""Model B"")# Generating random data for the plot with different trends data (""Model C"" and ""Model D"")# Generating random data for the plot with different trends data (""Model D"" and ""Model C"")# Data for the plot with distinct trends data ("
958,Customized Mimic,radar_19,"There is a reference image for you and I also have a set of data about the performance of Amazon, Meta, and Tesla across various business metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data for each company is as follows:
# Business metrics
categories = [""Revenue Growth"", ""Market Share"", ""Customer Satisfaction"", ""Innovation"", ""Operational Efficiency"", ""Brand Strength"", ""Employee Satisfaction"", ""Sustainability"",]
# Amazon's performance values
values1 = [85, 78, 90, 95, 82, 88, 70, 76]
# Meta's performance values
values2 = [78, 65, 85, 80, 75, 80, 68, 70]
# Tesla's performance values
values3 = [92, 88, 72, 85, 90, 94, 80, 84]
# Labels for the lines representing each company
line_label1 = ""Amazon""
line_label2 = ""Meta""
line_label3 = ""Tesla""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size.
",ori_500/radar_19.png,ori_500/radar_19.py,customized_500/radar_19.png,customized_500/radar_19.py,easy,<>
35,Direct Mimic,CB_21,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/CB_21.png,ori_500/CB_21.py,ori_500/CB_21.png,ori_500/CB_21.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting according to the model and the proposed function codes that reproduce the picture based on the picture based on the picture I provide. Note that it is necessary to use figsize=(8.0, 4.0) to set the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.model = [""Proposed"", ""FOD-Net"", ""SS3T""]model_name = ""Model""model_proposed = ""Proposed""model_FOD-net = ""FOD-Net""model_ss3t = ""SSS3T""# ===================# Part 3: Plot Configuration and Rendering# ===================fig, ax = plt.subplots(figsize=(8, 6)) # Adjusting figure size to match the original size."
867,Customized Mimic,line_53,"There is a reference image for you and I also have a set of data about transportation and commute statistics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Enhanced sample data to accommodate more subplots
x1 = np.array([2015, 2016, 2017, 2018, 2019])
y1 = np.array([1043.64, 1187.68, 1133.0, 1099.66, 989.0]) # Vehicle Miles Traveled (in billions)
e1 = np.array([24.68, 21.74, 45.99, 38.03, 41.24])

x2 = np.array([2015, 2016, 2017, 2018])
y2 = np.array([229.96, 276.06, 258.56, 247.89]) # Public Transport Ridership (in millions)
e2 = np.array([18.12, 18.12, 16.16, 32.32])

x3 = np.array([2010, 2012, 2014, 2016, 2018, 2020])
y3 = np.array([15.62, 24.26, 20.98, 18.98, 12.34, 12.34]) # Electric Vehicle Adoption Rate (in %)
e3 = np.array([0.34, 0.91, 0.72, 0.8, 0.31, 0.98])

x4 = np.array([5, 10, 15, 20, 25])
y4 = np.array([35.62, 44.26, 40.98, 38.98, 32.34]) # Average Commute Time (in minutes)
e4 = np.array([1.47, 1.17, 3.6, 2.8, 3.12])

x5 = np.array([1, 2, 3, 4, 5])
y5 = np.array([74.98, 98.03, 89.28, 83.95, 66.24]) # Number of Traffic Accidents (in thousands)
e5 = np.array([3.78, 3.29, 7.33, 6.01, 6.54])

x6 = np.array([200, 400, 600, 800, 1000])
y6 = np.array([187.45, 245.07, 223.2, 209.87, 165.6]) # Bicycle Lane Miles (in miles)
e6 = np.array([6.56, 5.58, 13.66, 11.01, 12.08])

# Titles
titles = [
""Vehicle Miles Traveled"",
""Public Transport Ridership"",
""Electric Vehicle Adoption"",
""Average Commute Time"",
""Traffic Accidents"",
""Bicycle Lane Miles"",
]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(12.0, 8.0) to set the image size.
",ori_500/line_53.png,ori_500/line_53.py,customized_500/line_53.png,customized_500/line_53.py,easy,# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as pltfrom matplotlib.lines import Line2D as Line2D# ===================# Part 2: Data Preparation# ===================# Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data for plotting and calculating the pyplotlib code. Data
274,Direct Mimic,heatmap_10,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/heatmap_10.png,ori_500/heatmap_10.py,ori_500/heatmap_10.png,ori_500/heatmap_10.py,hard,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting — Votee — Seer — Witch — Hunter — Villager — Abstain — Seer — Werewolf — Seer — Witch — Witch — Seer — Werewolf — Seer — Werewolf — Seer — Witch — Witch — Seer — Werewolf — Seer — Werewolf — Seer — Witch — Witch — Seer — Werewolf — Seer — Werewolf — Seer — Witch — Witch — Seer — Werewolf — Seer — Werewolf — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Witch — Seer — Seer — Seer — Seer —
942,Customized Mimic,radar_3,"There is a reference image for you and I also have a set of data about vehicle performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Data for PC1 and PC2
values_speed = [55.2, 62.8, 70.5, 68.3, 73.0, 75.2, 79.3, 82.1, 84.5, 88.8]
values_fuel_efficiency = [30.1, 28.4, 26.8, 27.2, 25.9, 24.3, 23.7, 22.1, 20.8, 19.5]
num_vars = len(values_speed)
labels = [""Average Speed (km/h)"", ""Fuel Efficiency (mpg)""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/radar_3.png,ori_500/radar_3.py,customized_500/radar_3.png,customized_500/radar_3.py,easy,"# Loadings PC1 and PC2 values_speed = [55.2, 62.8, 70.5, 68.3, 73.0, 75.2, 79.3, 82.1, 84.5, 88.8] # Average Speed (km/h) for Fuel Efficiency (mpg)
# Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
# Plot the reference image with a different color each axis.
plt.figure(figsize=(8, 8))
plt.polar(reference_image, color=""black"", marker=""o"", label=""Loadings PC1"")
plt.polar(reference_image, color=""red"", marker=""o"", label=""Loadings PC2"")"
695,Customized Mimic,box_11,"There is a reference image for you and I also have a set of data about solar panel efficiency in different seasons. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Updated sample data for the boxplots
data1 = [75, 78, 80, 82, 81, 79, 77]
data2 = [72, 74, 75, 73, 72.5, 73.8, 73]
ylabel = ""Efficiency (%)""
textlabel = ""1.0% Efficiency""
hlines = [80, 75]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 4.0) to set the image size.
",ori_500/box_11.png,ori_500/box_11.py,customized_500/box_11.png,customized_500/box_11.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the boxplots data for the solar panel efficiency in different seasons. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. # Updated sample data for the boxplots data1 = [75, 78, 82, 81, 79, 77] data2 = [72, 74, 73, 72.5, 73.8, 73] # Efficiency (%) data1 label = ""Efficiency (%)"" textlabel = ""1.0% Efficiency"" hlines = [80, 75] # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(6.0, 4.0) to set the image size.# ===================# Part 3: Plot Configuration and Rendering# ===================fig, ax = plt.subplots(figsize=(8, 8)) # Adjusting figure size to match the original image dimensions and save to file. # Adjusting figure size to match the original image dimensions and save to file. # Adjusting figure size to match the original image dimensions and save to file."
639,Customized Mimic,bar_55,"There is a reference image for you and I also have a set of data about sports activities participation rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# New field: Sports Activities
activities = [
""Running"",
""Swimming"",
""Cycling"",
""Weightlifting"",
""Yoga"",
""Basketball"",
""Tennis"",
""Soccer"",
""Hiking"",
""Dancing"",
]

# Approximate participation rates in percentage
participation_rates = [15.0, 12.5, 10.5, 9.0, 8.0, 7.5, 6.5, 6.0, 5.5, 4.5]
xlabel = ""Participation Rate (%)""
ylabel = ""Activity""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/bar_55.png,ori_500/bar_55.py,customized_500/bar_55.png,customized_500/bar_55.py,easy,"<img_src=sports-activities-participation-rates-in-percentage-participation-rates-150-125-105-9-0-8.0-7.5-6.5-6.0-5.5-4.5-xlabel = ""Participation Rate (%)"" ylabel = ""Activity"" 
Emulation | Frequency (%) 
Amusement | 7.6% 
 Pride | 6.6% 
 Sadness | 6.7% 
 Unbothered | 7.0% 
 Annoyance | 6.0% 
 Pride | 6.6% 
 Sadness | 6.7% 
 Unbothered | 7.0% 
 Amusement | 7.6%"
729,Customized Mimic,errorbar_10,"There is a reference image for you and I also have a set of data about average revenue by the number of sales teams. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The average revenue data is as follows:
# Number of sales teams
number_of_teams = [1, 2, 3, 4]
# Baseline revenue
baseline_revenue = [60, 60, 60, 60]
# Revenue for Team A
revenue_team_a = [58, 61, 75, 62]
# Revenue for Team B
revenue_team_b = [55, 62, 69, 64]
# Error values
errors = [2, 1.5, 1, 0.5]
# Label of x axis
xlabel_value = ""Number of Sales Teams""
# Label of y axis
ylabel_value = ""Average Revenue (in $1000s)""
# Titles
title = ""Revenue by Number of Sales Teams""
# Labels
label1 = ""Team A""
label2 = ""Team B""
label3 = ""Baseline""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/errorbar_10.png,ori_500/errorbar_10.py,customized_500/errorbar_10.png,customized_500/errorbar_10.py,easy,"# Example data to generate a chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data.
# Example data to generate a bar chart that accurately represents my data."
943,Customized Mimic,radar_4,"There is a reference image for you and I also have a set of data about different evaluation metrics for machine learning methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Define the data for each method
labels = np.array(
[""Accuracy"", ""Efficiency"", ""Scalability"", ""Security"", ""Usability""]
)
stats = np.array([[4, 3, 5, 2, 4], [3, 4, 4, 3, 5], [5, 2, 3, 4, 3]])
titles = [""Bayesian Network (Œµ = ‚àû)"", ""Differential Privacy Synthesizer (Œµ = ‚àû)"", ""Tabular Variational Autoencoder""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/radar_4.png,ori_500/radar_4.py,customized_500/radar_4.png,customized_500/radar_4.py,easy,<img_src=pgm-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1000-1
176,Direct Mimic,bar_92,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_92.png,ori_500/bar_92.py,ori_500/bar_92.png,ori_500/bar_92.py,medium,<<Role> <Count> <Human> <gpt4-cot> <gpt4-cot> <human> <gpt4-cot> <gpt4-cot> <human> <gpt4-cot> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human> <gpt4-cot> <human>
21,Direct Mimic,CB_7,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/CB_7.png,ori_500/CB_7.py,ori_500/CB_7.png,ori_500/CB_7.py,medium,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for plotting — HC_first (before aging) — HC_end (after aging) — HC_after aging — HC_end (after aging) — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC_after aging — HC
289,Direct Mimic,heatmap_25,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/heatmap_25.png,ori_500/heatmap_25.py,ori_500/heatmap_25.png,ori_500/heatmap_25.py,hard,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Sample data for the picture and the image size to match the original size. Now, please give me the matplotlib code that reproduces the picture below.cucumber = np.random.rand(24) + 0.80 # Tomato and lettuce data for the picture. Please use the same image size as the picture. Store the correct size for the picture. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour. Store the correct colour"
165,Direct Mimic,bar_81,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 4.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_81.png,ori_500/bar_81.py,ori_500/bar_81.png,ori_500/bar_81.py,medium,"# Plot the misleading recall for the picture
misleading_recall = [46.3, 45.0, 30.1, 43.7, 19.4] # Misleading recall for the picture

fig, ax = plt.subplots(figsize=(8, 5))

rects1 = ax.bar(x - width, misleading_recall, width, label=recall, color=""lightcoral"")
rects2 = ax.bar(x + width, misleading_recall, width, label=recall, color=""lightcoral"")

# Add text for the picture
for rect, value in zip(rects1, misleading_recall):
    rect.text(value, rect.get_x() + rect.get_width() / 2, value, f""{value}"", va=""center"", color=""black"")"
918,Customized Mimic,multidiff_24,"There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:
# Categories of business revenue sources
categories = [""Product Sales"", ""Service Fees"", ""Subscriptions"", ""Advertisements"", ""Investments""]
# Percentages of each revenue source
sizes = [35, 25, 20, 10, 10]
# Highlight the first category
explode = (0.1, 0, 0, 0, 0)
# Title 1
title_1 = ""Distribution of Business Revenue Sources""
# Labels for Key Performance Indicators (KPIs)
labels = [""Growth"", ""Profitability"", ""Customer Satisfaction"", ""Market Share"", ""Employee Engagement""]
# Values for each KPI
values = [0.8, 0.7, 0.9, 0.6, 0.85]
# Title 2
title_2 = ""Key Performance Indicators (KPIs)""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 5.0) to set the image size.
",ori_500/multidiff_24.png,ori_500/multidiff_24.py,customized_500/multidiff_24.png,customized_500/multidiff_24.py,hard,<img_src=python-matplotlib-code-reference-image-reference-image-data-category-explode-100-50-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0
759,Customized Mimic,errorpoint_10,"There is a reference image for you and I also have a set of data about sensor readings. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
labels = [""alpha"", ""beta"", ""gamma""]

x = np.linspace(0, 25, 6)
y1 = np.random.uniform(50, 100, 6)
y2 = np.random.uniform(60, 120, 6)
y3 = np.random.uniform(30, 80, 6)
error1 = [np.random.uniform(5, 10, 6), np.random.uniform(5, 10, 6)]
error2 = [np.random.uniform(8, 15, 6), np.random.uniform(8, 15, 6)] # Symmetric horizontal error
error3 = np.random.uniform(4, 10, 6)
title = ""Sensor Readings, Symmetric Error""
xvline = 12


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 9.0) to set the image size.
",ori_500/errorpoint_10.png,ori_500/errorpoint_10.py,customized_500/errorpoint_10.png,customized_500/errorpoint_10.py,medium,# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for the boxplots containing the error values and the error bars. Data for the boxplots contains the error values and the error bars are the same as the data for the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars. Data for the error bars is the same as the error bars.
612,Customized Mimic,bar_28,"There is a reference image for you and I also have a set of data about fuel efficiency across different types of transport. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Updated data
datasets = [""Urban Transport"", ""Rural Transport""]
electric = [2.7, 3.4]
hybrid = [1.9, 2.1]
diesel = [3.5, 2.8]

# X-axis positions
x = np.arange(len(datasets))
labels = [""Electric"", ""Hybrid"", ""Diesel""]
ylabel = ""Fuel Efficiency (km/l)""
xlabel = ""Transport Types""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 5.0) to set the image size.
",ori_500/bar_28.png,ori_500/bar_28.py,customized_500/bar_28.png,customized_500/bar_28.py,easy,<<img_src=voc_2012_1 img_alt=VOC 2012> <img_src=coco_2017_1 img_alt=COCO 2017>>
6,Direct Mimic,3d_7,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/3d_7.png,ori_500/3d_7.py,ori_500/3d_7.png,ori_500/3d_7.py,medium,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)from matplotlib.colors import LinearSegmentedColormap# ===================# Part 2: Data Preparation# ===================# Sample data for the matplotlib figure and the picture that I provide for the picture. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image. Data for the picture is given in the image.
521,Customized Mimic,CB_7,"There is a reference image for you and I also have a set of data about battery capacity before and after a certain number of charge cycles. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The battery capacity data is as follows:
# Battery capacity before charge cycles
x = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100]
# Battery capacity after charge cycles
y = [95, 190, 280, 370, 460, 550, 640, 730, 820, 910, 1000]
# Percentage of battery capacity retained
percentages = [""95%"", ""95%"", ""93%"", ""92.5%"", ""92%"", ""91.6%"", ""91.4%"", ""91.2%"", ""91.1%"", ""91%"", ""90.9%""]
# Label of x axis
xlabel_value = ""Battery Capacity (mAh) Before Charge Cycles""
# Label of y axis
ylabel_value = ""Battery Capacity (mAh) After Charge Cycles""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size.
",ori_500/CB_7.png,ori_500/CB_7.py,customized_500/CB_7.png,customized_500/CB_7.py,medium,"# Reference image for you and I also have a set of data about battery capacity before and after a certain number of charge cycles. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
The battery capacity data is as follows: # Battery capacity before charge cycles x = [100, 300, 400, 500, 600, 800, 900, 1100] # Battery capacity after charge cycles y = [95, 190, 280, 370, 460, 550, 640, 730, 910] # Percentage of battery capacity retained percentages = [""95%"", ""92%"", ""93%"", ""91.4%"", ""91.2%"", ""91.9%""] # Label of x axis xlabel_value = ""Battery Capacity (mAh) Before Charge Cycles"" # Label of y axis ylabel_value = ""Battery Capacity (mAh) After Charge Cycles"" # Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 6.0) to set the image size."
881,Customized Mimic,line_67,"There is a reference image for you and I also have a set of data about educational statistics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Data for the plot
years = np.array([2015, 2016, 2017, 2018, 2019, 2020, 2021])
graduation_rates = np.clip(
np.linspace(75, 85, len(years)) + np.random.normal(0, 1.5, len(years)),
70,
90,
)
dropout_rates = np.clip(
np.linspace(10, 5, len(years)) + np.random.normal(0, 1, len(years)),
3,
12,
)
teacher_student_ratio = [15] * len(years) # constant teacher-student ratio
average_class_size = [25] * len(years) # constant average class size

labels = [""Graduation Rate"", ""Dropout Rate""]
xlabel = ""Year""
ylabels = [""Graduation Rate (%)"", ""Dropout Rate (%)""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(6.0, 5.0) to set the image size.
",ori_500/line_67.png,ori_500/line_67.py,customized_500/line_67.png,customized_500/line_67.py,easy,<>
805,Customized Mimic,hist_11,"There is a reference image for you and I also have a set of data about caloric intake and population density. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Generate random data for demonstration
data1 = np.random.normal(2.5, 0.5, 500)
data2 = np.random.normal(3.0, 0.5, 1000)
labels = [""Healthy"", ""Unhealthy""]
xlabel = ""Caloric Intake""
ylabel = ""Population Density""
titlelist = [""(a) Study 1"", ""(b) Study 2"", ""(c) Study 3"", ""(d) Study 4""]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/hist_11.png,ori_500/hist_11.py,customized_500/hist_11.png,customized_500/hist_11.py,easy,# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for plotting and generating histograms for each subplot and histograms for each subplot and the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Data for density plots in the reference image and accurately represents my data. Density plots
621,Customized Mimic,bar_37,"There is a reference image for you and I also have a set of data about blood sugar change after consuming different foods over time. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The blood sugar change data is as follows:
# Foods
foods = [""Apple"", ""Banana"", ""Orange""]
# Blood Sugar Change (%)
blood_sugar_change = {
    ""0 min"": [0.0, 0.0, 0.0],
    ""15 min"": [5.0, 12.0, 7.0],
    ""30 min"": [8.0, 20.0, 12.0],
    ""45 min"": [7.5, 15.0, 10.0],
    ""60 min"": [5.0, 10.0, 8.0],
    ""75 min"": [3.0, 8.0, 5.0],
    ""90 min"": [1.0, 5.0, 2.0],
}
# Label of y axis
ylabel_text = ""Blood Sugar Change (%)""
# Label of x axis
xlabel_text = ""Foods""
# Titles
title_text = ""Blood Sugar Change Over Time by Food Type""
legend_title = ""Time Interval""

Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(12.0, 4.0) to set the image size.
",ori_500/bar_37.png,ori_500/bar_37.py,customized_500/bar_37.png,customized_500/bar_37.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The blood sugar change data is as follows: # Foods foods = [""Apple"", ""Banana"", ""Orange""] # Blood Sugar Change (%) blood_sugar_change = {
    ""0.0"",
    ""4.8"",
    ""75%"",
    ""6.8"",
    ""87.50%"",
    ""7:8"":
} # Labels for x-axis and y-label_text = ""# Foods"" # Titles title_text = ""Blood Sugar Change Over Time by Food Type"" legend_title = ""Time Interval"" # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(12, 4.0) to set the image size.# ===================# Part 3: Plot Configuration and Rendering# ===================fig, ax = plt.subplots(figsize=(10, 6)) # Adjust the figure size to match the original image dimensions and save the figure. # Set the figure size to match the original image dimensions. # Set the figure size to match the original image dimensions. # Set"
250,Direct Mimic,errorpoint_1,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(8.0, 5.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/errorpoint_1.png,ori_500/errorpoint_1.py,ori_500/errorpoint_1.png,ori_500/errorpoint_1.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Dataset mean and mean values for the picture provideddata = np.random.rand(10, 10) * 0.11 + 0.10 * np.random.rand(10, 10) * 0.10 + 0.11 + 0.12mean = np.mean(data) + np.random.rand(10, 10) * 0.11 + 0.12 + 0.12 + 0.12 + 0.12 + 0.12 + 0.12 # Offsets for the mean values for the data set provideddata_mean = np.mean(data) + np.random.rand(10, 10) * 0.11 + 0.11 + 0.12 + 0.12 + 0.12 # Offsets for the mean values for the data set providedmean_data = np.mean(data) + np.random.rand(10, 10) * 0.11 + 0.12 + 0.12 + 0.12 + 0.12 # Offsets for the mean values for the data set provided# Creating a list of the data sets that I have to generate to generate the python code that reproduces the picture below. Starting from 0.02 to 0.06,"
136,Direct Mimic,bar_52,"You are an expert Python developer who specializes in writing matplotlib code based on a given picture. I found a very nice picture in a STEM paper, but there is no corresponding source code available. I need your help to generate the Python code that can reproduce the picture based on the picture I provide.
Note that it is necessary to use figsize=(6.0, 6.0) to set the image size to match the original size.
Now, please give me the matplotlib code that reproduces the picture below.",ori_500/bar_52.png,ori_500/bar_52.py,ori_500/bar_52.png,ori_500/bar_52.py,medium,# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture that reproduces the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below. Data for the picture below.
930,Customized Mimic,pie_11,"There is a reference image for you and I also have a set of data about health expenditures for a population and specific health programs. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Different data for another example
labels = [""Hospitals"", ""Clinics"", ""Pharmacy"", ""Fitness"", ""Others""]
outer_sizes = [500, 300, 200, 100, 150] # health expenditures for a population
inner_sizes = [250, 120, 80, 30, 20] # health expenditures for specific health programs

title = ""Health Expenditures - Population vs. Programs""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(8.0, 8.0) to set the image size.
",ori_500/pie_11.png,ori_500/pie_11.py,customized_500/pie_11.png,customized_500/pie_11.py,medium,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. # Different data for another example labels = [""Hospitals"", ""Clinics"", ""Pharmacy"", ""Fitness"", ""Others""] outer_sizes = [500, 300, 200, 100, 150] # health expenditures for a population inner_sizes = [250, 120, 80, 30, 20] # health expenditures for specific health programs       title = ""Health Expenditures - Population vs. Programs""         Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8.0, 8.0) to set the image size. """"""
# Data for the chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(8.0, 8.0) to set the image size. """"""
labels = [""Others"", ""Entertainment"", ""Food"", ""Transport"", ""Utilities""] # The color of the"
803,Customized Mimic,hist_9,"There is a reference image for you and I also have a set of data about environmental measurements. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Sample data (replace with your actual data)
data1 = np.random.normal(15, 2, 10000) # Simulated temperature data in degrees Celsius
data2 = np.random.normal(10, 3, 10000) # Simulated humidity data in percentage
binslist = [100, 100]
titles = [""Temperature Distribution"", ""Humidity Distribution""]
rangelist = [(8, 22), (0, 25)]


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 7.0) to set the image size.
",ori_500/hist_9.png,ori_500/hist_9.py,customized_500/hist_9.png,customized_500/hist_9.py,easy,"# Create a figure with two subplots (1, 2) and one histogram (10000)
fig, axs = plt.subplots(2, 1, figsize=(10, 6))"
764,Customized Mimic,graph_5,"There is a reference image for you and I also have a set of data about transportation networks between cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


# Create a directed graph representing a small transportation network
G = nx.DiGraph()

# Add nodes representing cities
cities = ['Beijing', 'Chengdu', 'Shanghai']
G.add_nodes_from(cities)

# Define edges representing direct transportation routes between cities
edges = [('Beijing', 'Chengdu'), ('Chengdu', 'Shanghai'), ('Shanghai', 'Beijing')]
G.add_edges_from(edges)

# Add self-loops representing intra-city transportation routes
self_loops = [('Beijing', 'Beijing'), ('Chengdu', 'Chengdu'), ('Shanghai', 'Shanghai')]
G.add_edges_from(self_loops)

# Get positions for the nodes in a circular layout
pos = nx.circular_layout(G)


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 8.0) to set the image size.
",ori_500/graph_5.png,ori_500/graph_5.py,customized_500/graph_5.png,customized_500/graph_5.py,easy,"# ===================# Part 1: Importing Libraries# ===================import matplotlib.pyplot as pltimport numpy as np; np.random.seed(0)# ===================# Part 2: Data Preparation# ===================# Define the data representing a small transportation network G = nx.DiGraph() # Add nodes representing cities cities = [""Beijing"", ""Chengdu"", ""Shanghai""] Gazette nodes_from(cities) # Define edges representing direct transportation routes between cities edges = [('Beijing', 'Chengdu'), ('Chengdu', 'Shanghai'), ('Shanghai', 'Beijing')] G.add_edges_from(edges) # Add self-loops representing intra-city transportation routes self_loops = [('Beijing', 'Beijing'), ('Chengdu', 'Shanghai'), ('Chengdu', 'Shanghai')] G.add_edges_from(self_loops) # Get positions for the nodes in a circular layout pos = nx.circular_layout(G) # Create a chart that exactly mirrors the style of the reference image and accurately represents my data. **Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. **Note that it is necessary to use figsize=(10.0, 8.0) to set the image size."
861,Customized Mimic,line_47,"There is a reference image for you and I also have a set of data about performance metrics over time. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.


import numpy as np;np.random.seed(0)
# Generate new data representing different types of performance metrics over time
time_points = np.linspace(0, 12, 100) # Representing time in months

# Different performance data
performance_standard = 0.05 * time_points # Linear increase
performance_innovation = 0.5 * np.sin(0.5 * np.pi * time_points / 12) + 0.5 # Sinusoidal with increasing trend

# Calculate uncertainty bounds for visual emphasis
upper_bound_standard = performance_standard + 0.05
lower_bound_standard = performance_standard - 0.05
upper_bound_innovation = performance_innovation + 0.1
lower_bound_innovation = performance_innovation - 0.1

# Axes Limits and Labels
xlabel_value = ""Time (Months)""

ylabel_value = ""Performance Index""

# Labels
label_1 = ""Standard Performance""
label_2 = ""Innovative Performance""

# Title
title = ""Comparative Performance Analysis Over Time""


Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.
Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.
Note that it is necessary to use figsize=(10.0, 6.0) to set the image size.
",ori_500/line_47.png,ori_500/line_47.py,customized_500/line_47.png,customized_500/line_47.py,easy,"# ===================# Part 1: Importing Libraries# ===================import numpy as np; np.random.seed(0)import matplotlib.pyplot as plt# ===================# Part 2: Data Preparation# ===================# Data for plotting and generating performance metrics over time — performance analysis over time — performance_metrics = np.array([0.4, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2]) # Number of data points for visualization — number of labels and values — performance_metrics = np.array([0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]) # Linear increase performance innovation = 0.5 * np.sin(0.5 * np.pi * time_points / 12) + 0.5 # Sinusoidal with increasing trend # Calculate uncertainty bounds for visual emphasis upper_bound_standard = performance_innovation - 0.1 # Axes Limits and Labels #Performance Index"" # Labels label 1 = ""Standard Performance"" label_2 = ""Innovative Performance"" # Title title = ""Comparative Performance Analysis Over Time"" # Now, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. Note: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable. Note that it is necessary to use figsize=(10, 6.0)"
